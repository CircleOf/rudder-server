// Code generated by MockGen. DO NOT EDIT.
// Source: jobsdb.go

// Package jobsdb is a generated GoMock package.
package jobsdb

import (
	sql "database/sql"
	json "encoding/json"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
)

// Mockjobsdbcommand is a mock of jobsdbcommand interface.
type Mockjobsdbcommand struct {
	ctrl     *gomock.Controller
	recorder *MockjobsdbcommandMockRecorder
}

// MockjobsdbcommandMockRecorder is the mock recorder for Mockjobsdbcommand.
type MockjobsdbcommandMockRecorder struct {
	mock *Mockjobsdbcommand
}

// NewMockjobsdbcommand creates a new mock instance.
func NewMockjobsdbcommand(ctrl *gomock.Controller) *Mockjobsdbcommand {
	mock := &Mockjobsdbcommand{ctrl: ctrl}
	mock.recorder = &MockjobsdbcommandMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockjobsdbcommand) EXPECT() *MockjobsdbcommandMockRecorder {
	return m.recorder
}

// Store mocks base method.
func (m *Mockjobsdbcommand) Store(jobList []*JobT) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", jobList)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockjobsdbcommandMockRecorder) Store(jobList interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*Mockjobsdbcommand)(nil).Store), jobList)
}

// StoreInTx mocks base method.
func (m *Mockjobsdbcommand) StoreInTx(tx StoreSafeTx, jobList []*JobT) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreInTx", tx, jobList)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreInTx indicates an expected call of StoreInTx.
func (mr *MockjobsdbcommandMockRecorder) StoreInTx(tx, jobList interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreInTx", reflect.TypeOf((*Mockjobsdbcommand)(nil).StoreInTx), tx, jobList)
}

// StoreWithRetryEach mocks base method.
func (m *Mockjobsdbcommand) StoreWithRetryEach(jobList []*JobT) map[uuid.UUID]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreWithRetryEach", jobList)
	ret0, _ := ret[0].(map[uuid.UUID]string)
	return ret0
}

// StoreWithRetryEach indicates an expected call of StoreWithRetryEach.
func (mr *MockjobsdbcommandMockRecorder) StoreWithRetryEach(jobList interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreWithRetryEach", reflect.TypeOf((*Mockjobsdbcommand)(nil).StoreWithRetryEach), jobList)
}

// StoreWithRetryEachInTx mocks base method.
func (m *Mockjobsdbcommand) StoreWithRetryEachInTx(tx StoreSafeTx, jobList []*JobT) map[uuid.UUID]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreWithRetryEachInTx", tx, jobList)
	ret0, _ := ret[0].(map[uuid.UUID]string)
	return ret0
}

// StoreWithRetryEachInTx indicates an expected call of StoreWithRetryEachInTx.
func (mr *MockjobsdbcommandMockRecorder) StoreWithRetryEachInTx(tx, jobList interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreWithRetryEachInTx", reflect.TypeOf((*Mockjobsdbcommand)(nil).StoreWithRetryEachInTx), tx, jobList)
}

// UpdateJobStatus mocks base method.
func (m *Mockjobsdbcommand) UpdateJobStatus(statusList []*JobStatusT, customValFilters []string, parameterFilters []ParameterFilterT) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJobStatus", statusList, customValFilters, parameterFilters)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateJobStatus indicates an expected call of UpdateJobStatus.
func (mr *MockjobsdbcommandMockRecorder) UpdateJobStatus(statusList, customValFilters, parameterFilters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJobStatus", reflect.TypeOf((*Mockjobsdbcommand)(nil).UpdateJobStatus), statusList, customValFilters, parameterFilters)
}

// UpdateJobStatusInTx mocks base method.
func (m *Mockjobsdbcommand) UpdateJobStatusInTx(txHandler UpdateSafeTx, statusList []*JobStatusT, customValFilters []string, parameterFilters []ParameterFilterT) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJobStatusInTx", txHandler, statusList, customValFilters, parameterFilters)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateJobStatusInTx indicates an expected call of UpdateJobStatusInTx.
func (mr *MockjobsdbcommandMockRecorder) UpdateJobStatusInTx(txHandler, statusList, customValFilters, parameterFilters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJobStatusInTx", reflect.TypeOf((*Mockjobsdbcommand)(nil).UpdateJobStatusInTx), txHandler, statusList, customValFilters, parameterFilters)
}

// WithStoreSafeTx mocks base method.
func (m *Mockjobsdbcommand) WithStoreSafeTx(arg0 func(StoreSafeTx) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithStoreSafeTx", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithStoreSafeTx indicates an expected call of WithStoreSafeTx.
func (mr *MockjobsdbcommandMockRecorder) WithStoreSafeTx(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithStoreSafeTx", reflect.TypeOf((*Mockjobsdbcommand)(nil).WithStoreSafeTx), arg0)
}

// WithTx mocks base method.
func (m *Mockjobsdbcommand) WithTx(arg0 func(Tx) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithTx indicates an expected call of WithTx.
func (mr *MockjobsdbcommandMockRecorder) WithTx(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*Mockjobsdbcommand)(nil).WithTx), arg0)
}

// WithUpdateSafeTx mocks base method.
func (m *Mockjobsdbcommand) WithUpdateSafeTx(arg0 func(UpdateSafeTx) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithUpdateSafeTx", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithUpdateSafeTx indicates an expected call of WithUpdateSafeTx.
func (mr *MockjobsdbcommandMockRecorder) WithUpdateSafeTx(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithUpdateSafeTx", reflect.TypeOf((*Mockjobsdbcommand)(nil).WithUpdateSafeTx), arg0)
}

// Mockjobsdbquery is a mock of jobsdbquery interface.
type Mockjobsdbquery struct {
	ctrl     *gomock.Controller
	recorder *MockjobsdbqueryMockRecorder
}

// MockjobsdbqueryMockRecorder is the mock recorder for Mockjobsdbquery.
type MockjobsdbqueryMockRecorder struct {
	mock *Mockjobsdbquery
}

// NewMockjobsdbquery creates a new mock instance.
func NewMockjobsdbquery(ctrl *gomock.Controller) *Mockjobsdbquery {
	mock := &Mockjobsdbquery{ctrl: ctrl}
	mock.recorder = &MockjobsdbqueryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockjobsdbquery) EXPECT() *MockjobsdbqueryMockRecorder {
	return m.recorder
}

// GetExecuting mocks base method.
func (m *Mockjobsdbquery) GetExecuting(params GetQueryParamsT) []*JobT {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExecuting", params)
	ret0, _ := ret[0].([]*JobT)
	return ret0
}

// GetExecuting indicates an expected call of GetExecuting.
func (mr *MockjobsdbqueryMockRecorder) GetExecuting(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecuting", reflect.TypeOf((*Mockjobsdbquery)(nil).GetExecuting), params)
}

// GetImporting mocks base method.
func (m *Mockjobsdbquery) GetImporting(params GetQueryParamsT) []*JobT {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImporting", params)
	ret0, _ := ret[0].([]*JobT)
	return ret0
}

// GetImporting indicates an expected call of GetImporting.
func (mr *MockjobsdbqueryMockRecorder) GetImporting(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImporting", reflect.TypeOf((*Mockjobsdbquery)(nil).GetImporting), params)
}

// GetPileUpCounts mocks base method.
func (m *Mockjobsdbquery) GetPileUpCounts(statMap map[string]map[string]int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetPileUpCounts", statMap)
}

// GetPileUpCounts indicates an expected call of GetPileUpCounts.
func (mr *MockjobsdbqueryMockRecorder) GetPileUpCounts(statMap interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPileUpCounts", reflect.TypeOf((*Mockjobsdbquery)(nil).GetPileUpCounts), statMap)
}

// GetProcessed mocks base method.
func (m *Mockjobsdbquery) GetProcessed(params GetQueryParamsT) []*JobT {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProcessed", params)
	ret0, _ := ret[0].([]*JobT)
	return ret0
}

// GetProcessed indicates an expected call of GetProcessed.
func (mr *MockjobsdbqueryMockRecorder) GetProcessed(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProcessed", reflect.TypeOf((*Mockjobsdbquery)(nil).GetProcessed), params)
}

// GetToRetry mocks base method.
func (m *Mockjobsdbquery) GetToRetry(params GetQueryParamsT) []*JobT {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToRetry", params)
	ret0, _ := ret[0].([]*JobT)
	return ret0
}

// GetToRetry indicates an expected call of GetToRetry.
func (mr *MockjobsdbqueryMockRecorder) GetToRetry(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToRetry", reflect.TypeOf((*Mockjobsdbquery)(nil).GetToRetry), params)
}

// GetUnprocessed mocks base method.
func (m *Mockjobsdbquery) GetUnprocessed(params GetQueryParamsT) []*JobT {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnprocessed", params)
	ret0, _ := ret[0].([]*JobT)
	return ret0
}

// GetUnprocessed indicates an expected call of GetUnprocessed.
func (mr *MockjobsdbqueryMockRecorder) GetUnprocessed(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnprocessed", reflect.TypeOf((*Mockjobsdbquery)(nil).GetUnprocessed), params)
}

// GetWaiting mocks base method.
func (m *Mockjobsdbquery) GetWaiting(params GetQueryParamsT) []*JobT {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWaiting", params)
	ret0, _ := ret[0].([]*JobT)
	return ret0
}

// GetWaiting indicates an expected call of GetWaiting.
func (mr *MockjobsdbqueryMockRecorder) GetWaiting(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWaiting", reflect.TypeOf((*Mockjobsdbquery)(nil).GetWaiting), params)
}

// Mockjobsdbadmin is a mock of jobsdbadmin interface.
type Mockjobsdbadmin struct {
	ctrl     *gomock.Controller
	recorder *MockjobsdbadminMockRecorder
}

// MockjobsdbadminMockRecorder is the mock recorder for Mockjobsdbadmin.
type MockjobsdbadminMockRecorder struct {
	mock *Mockjobsdbadmin
}

// NewMockjobsdbadmin creates a new mock instance.
func NewMockjobsdbadmin(ctrl *gomock.Controller) *Mockjobsdbadmin {
	mock := &Mockjobsdbadmin{ctrl: ctrl}
	mock.recorder = &MockjobsdbadminMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockjobsdbadmin) EXPECT() *MockjobsdbadminMockRecorder {
	return m.recorder
}

// DeleteExecuting mocks base method.
func (m *Mockjobsdbadmin) DeleteExecuting() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteExecuting")
}

// DeleteExecuting indicates an expected call of DeleteExecuting.
func (mr *MockjobsdbadminMockRecorder) DeleteExecuting() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExecuting", reflect.TypeOf((*Mockjobsdbadmin)(nil).DeleteExecuting))
}

// Ping mocks base method.
func (m *Mockjobsdbadmin) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockjobsdbadminMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*Mockjobsdbadmin)(nil).Ping))
}

// Status mocks base method.
func (m *Mockjobsdbadmin) Status() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Status indicates an expected call of Status.
func (mr *MockjobsdbadminMockRecorder) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*Mockjobsdbadmin)(nil).Status))
}

// Mockjobsdbjournal is a mock of jobsdbjournal interface.
type Mockjobsdbjournal struct {
	ctrl     *gomock.Controller
	recorder *MockjobsdbjournalMockRecorder
}

// MockjobsdbjournalMockRecorder is the mock recorder for Mockjobsdbjournal.
type MockjobsdbjournalMockRecorder struct {
	mock *Mockjobsdbjournal
}

// NewMockjobsdbjournal creates a new mock instance.
func NewMockjobsdbjournal(ctrl *gomock.Controller) *Mockjobsdbjournal {
	mock := &Mockjobsdbjournal{ctrl: ctrl}
	mock.recorder = &MockjobsdbjournalMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockjobsdbjournal) EXPECT() *MockjobsdbjournalMockRecorder {
	return m.recorder
}

// GetJournalEntries mocks base method.
func (m *Mockjobsdbjournal) GetJournalEntries(opType string) []JournalEntryT {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJournalEntries", opType)
	ret0, _ := ret[0].([]JournalEntryT)
	return ret0
}

// GetJournalEntries indicates an expected call of GetJournalEntries.
func (mr *MockjobsdbjournalMockRecorder) GetJournalEntries(opType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJournalEntries", reflect.TypeOf((*Mockjobsdbjournal)(nil).GetJournalEntries), opType)
}

// JournalDeleteEntry mocks base method.
func (m *Mockjobsdbjournal) JournalDeleteEntry(opID int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "JournalDeleteEntry", opID)
}

// JournalDeleteEntry indicates an expected call of JournalDeleteEntry.
func (mr *MockjobsdbjournalMockRecorder) JournalDeleteEntry(opID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JournalDeleteEntry", reflect.TypeOf((*Mockjobsdbjournal)(nil).JournalDeleteEntry), opID)
}

// JournalMarkStart mocks base method.
func (m *Mockjobsdbjournal) JournalMarkStart(opType string, opPayload json.RawMessage) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JournalMarkStart", opType, opPayload)
	ret0, _ := ret[0].(int64)
	return ret0
}

// JournalMarkStart indicates an expected call of JournalMarkStart.
func (mr *MockjobsdbjournalMockRecorder) JournalMarkStart(opType, opPayload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JournalMarkStart", reflect.TypeOf((*Mockjobsdbjournal)(nil).JournalMarkStart), opType, opPayload)
}

// Mockjobsdblifecycle is a mock of jobsdblifecycle interface.
type Mockjobsdblifecycle struct {
	ctrl     *gomock.Controller
	recorder *MockjobsdblifecycleMockRecorder
}

// MockjobsdblifecycleMockRecorder is the mock recorder for Mockjobsdblifecycle.
type MockjobsdblifecycleMockRecorder struct {
	mock *Mockjobsdblifecycle
}

// NewMockjobsdblifecycle creates a new mock instance.
func NewMockjobsdblifecycle(ctrl *gomock.Controller) *Mockjobsdblifecycle {
	mock := &Mockjobsdblifecycle{ctrl: ctrl}
	mock.recorder = &MockjobsdblifecycleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockjobsdblifecycle) EXPECT() *MockjobsdblifecycleMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *Mockjobsdblifecycle) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockjobsdblifecycleMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*Mockjobsdblifecycle)(nil).Close))
}

// Start mocks base method.
func (m *Mockjobsdblifecycle) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockjobsdblifecycleMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*Mockjobsdblifecycle)(nil).Start))
}

// Stop mocks base method.
func (m *Mockjobsdblifecycle) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockjobsdblifecycleMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*Mockjobsdblifecycle)(nil).Stop))
}

// TearDown mocks base method.
func (m *Mockjobsdblifecycle) TearDown() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TearDown")
}

// TearDown indicates an expected call of TearDown.
func (mr *MockjobsdblifecycleMockRecorder) TearDown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TearDown", reflect.TypeOf((*Mockjobsdblifecycle)(nil).TearDown))
}

// Mockjobsdbdeprecated is a mock of jobsdbdeprecated interface.
type Mockjobsdbdeprecated struct {
	ctrl     *gomock.Controller
	recorder *MockjobsdbdeprecatedMockRecorder
}

// MockjobsdbdeprecatedMockRecorder is the mock recorder for Mockjobsdbdeprecated.
type MockjobsdbdeprecatedMockRecorder struct {
	mock *Mockjobsdbdeprecated
}

// NewMockjobsdbdeprecated creates a new mock instance.
func NewMockjobsdbdeprecated(ctrl *gomock.Controller) *Mockjobsdbdeprecated {
	mock := &Mockjobsdbdeprecated{ctrl: ctrl}
	mock.recorder = &MockjobsdbdeprecatedMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockjobsdbdeprecated) EXPECT() *MockjobsdbdeprecatedMockRecorder {
	return m.recorder
}

// HandleT mocks base method.
func (m *Mockjobsdbdeprecated) HandleT() *HandleT {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleT")
	ret0, _ := ret[0].(*HandleT)
	return ret0
}

// HandleT indicates an expected call of HandleT.
func (mr *MockjobsdbdeprecatedMockRecorder) HandleT() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleT", reflect.TypeOf((*Mockjobsdbdeprecated)(nil).HandleT))
}

// MockJobsDB is a mock of JobsDB interface.
type MockJobsDB struct {
	ctrl     *gomock.Controller
	recorder *MockJobsDBMockRecorder
}

// MockJobsDBMockRecorder is the mock recorder for MockJobsDB.
type MockJobsDBMockRecorder struct {
	mock *MockJobsDB
}

// NewMockJobsDB creates a new mock instance.
func NewMockJobsDB(ctrl *gomock.Controller) *MockJobsDB {
	mock := &MockJobsDB{ctrl: ctrl}
	mock.recorder = &MockJobsDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobsDB) EXPECT() *MockJobsDBMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockJobsDB) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockJobsDBMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockJobsDB)(nil).Close))
}

// DeleteExecuting mocks base method.
func (m *MockJobsDB) DeleteExecuting() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteExecuting")
}

// DeleteExecuting indicates an expected call of DeleteExecuting.
func (mr *MockJobsDBMockRecorder) DeleteExecuting() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExecuting", reflect.TypeOf((*MockJobsDB)(nil).DeleteExecuting))
}

// GetExecuting mocks base method.
func (m *MockJobsDB) GetExecuting(params GetQueryParamsT) []*JobT {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExecuting", params)
	ret0, _ := ret[0].([]*JobT)
	return ret0
}

// GetExecuting indicates an expected call of GetExecuting.
func (mr *MockJobsDBMockRecorder) GetExecuting(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecuting", reflect.TypeOf((*MockJobsDB)(nil).GetExecuting), params)
}

// GetImporting mocks base method.
func (m *MockJobsDB) GetImporting(params GetQueryParamsT) []*JobT {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImporting", params)
	ret0, _ := ret[0].([]*JobT)
	return ret0
}

// GetImporting indicates an expected call of GetImporting.
func (mr *MockJobsDBMockRecorder) GetImporting(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImporting", reflect.TypeOf((*MockJobsDB)(nil).GetImporting), params)
}

// GetJournalEntries mocks base method.
func (m *MockJobsDB) GetJournalEntries(opType string) []JournalEntryT {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJournalEntries", opType)
	ret0, _ := ret[0].([]JournalEntryT)
	return ret0
}

// GetJournalEntries indicates an expected call of GetJournalEntries.
func (mr *MockJobsDBMockRecorder) GetJournalEntries(opType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJournalEntries", reflect.TypeOf((*MockJobsDB)(nil).GetJournalEntries), opType)
}

// GetPileUpCounts mocks base method.
func (m *MockJobsDB) GetPileUpCounts(statMap map[string]map[string]int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetPileUpCounts", statMap)
}

// GetPileUpCounts indicates an expected call of GetPileUpCounts.
func (mr *MockJobsDBMockRecorder) GetPileUpCounts(statMap interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPileUpCounts", reflect.TypeOf((*MockJobsDB)(nil).GetPileUpCounts), statMap)
}

// GetProcessed mocks base method.
func (m *MockJobsDB) GetProcessed(params GetQueryParamsT) []*JobT {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProcessed", params)
	ret0, _ := ret[0].([]*JobT)
	return ret0
}

// GetProcessed indicates an expected call of GetProcessed.
func (mr *MockJobsDBMockRecorder) GetProcessed(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProcessed", reflect.TypeOf((*MockJobsDB)(nil).GetProcessed), params)
}

// GetToRetry mocks base method.
func (m *MockJobsDB) GetToRetry(params GetQueryParamsT) []*JobT {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToRetry", params)
	ret0, _ := ret[0].([]*JobT)
	return ret0
}

// GetToRetry indicates an expected call of GetToRetry.
func (mr *MockJobsDBMockRecorder) GetToRetry(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToRetry", reflect.TypeOf((*MockJobsDB)(nil).GetToRetry), params)
}

// GetUnprocessed mocks base method.
func (m *MockJobsDB) GetUnprocessed(params GetQueryParamsT) []*JobT {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnprocessed", params)
	ret0, _ := ret[0].([]*JobT)
	return ret0
}

// GetUnprocessed indicates an expected call of GetUnprocessed.
func (mr *MockJobsDBMockRecorder) GetUnprocessed(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnprocessed", reflect.TypeOf((*MockJobsDB)(nil).GetUnprocessed), params)
}

// GetWaiting mocks base method.
func (m *MockJobsDB) GetWaiting(params GetQueryParamsT) []*JobT {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWaiting", params)
	ret0, _ := ret[0].([]*JobT)
	return ret0
}

// GetWaiting indicates an expected call of GetWaiting.
func (mr *MockJobsDBMockRecorder) GetWaiting(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWaiting", reflect.TypeOf((*MockJobsDB)(nil).GetWaiting), params)
}

// HandleT mocks base method.
func (m *MockJobsDB) HandleT() *HandleT {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleT")
	ret0, _ := ret[0].(*HandleT)
	return ret0
}

// HandleT indicates an expected call of HandleT.
func (mr *MockJobsDBMockRecorder) HandleT() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleT", reflect.TypeOf((*MockJobsDB)(nil).HandleT))
}

// Identifier mocks base method.
func (m *MockJobsDB) Identifier() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Identifier")
	ret0, _ := ret[0].(string)
	return ret0
}

// Identifier indicates an expected call of Identifier.
func (mr *MockJobsDBMockRecorder) Identifier() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Identifier", reflect.TypeOf((*MockJobsDB)(nil).Identifier))
}

// JournalDeleteEntry mocks base method.
func (m *MockJobsDB) JournalDeleteEntry(opID int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "JournalDeleteEntry", opID)
}

// JournalDeleteEntry indicates an expected call of JournalDeleteEntry.
func (mr *MockJobsDBMockRecorder) JournalDeleteEntry(opID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JournalDeleteEntry", reflect.TypeOf((*MockJobsDB)(nil).JournalDeleteEntry), opID)
}

// JournalMarkStart mocks base method.
func (m *MockJobsDB) JournalMarkStart(opType string, opPayload json.RawMessage) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JournalMarkStart", opType, opPayload)
	ret0, _ := ret[0].(int64)
	return ret0
}

// JournalMarkStart indicates an expected call of JournalMarkStart.
func (mr *MockJobsDBMockRecorder) JournalMarkStart(opType, opPayload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JournalMarkStart", reflect.TypeOf((*MockJobsDB)(nil).JournalMarkStart), opType, opPayload)
}

// Ping mocks base method.
func (m *MockJobsDB) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockJobsDBMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockJobsDB)(nil).Ping))
}

// Start mocks base method.
func (m *MockJobsDB) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockJobsDBMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockJobsDB)(nil).Start))
}

// Status mocks base method.
func (m *MockJobsDB) Status() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Status indicates an expected call of Status.
func (mr *MockJobsDBMockRecorder) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockJobsDB)(nil).Status))
}

// Stop mocks base method.
func (m *MockJobsDB) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockJobsDBMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockJobsDB)(nil).Stop))
}

// Store mocks base method.
func (m *MockJobsDB) Store(jobList []*JobT) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", jobList)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockJobsDBMockRecorder) Store(jobList interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockJobsDB)(nil).Store), jobList)
}

// StoreInTx mocks base method.
func (m *MockJobsDB) StoreInTx(tx StoreSafeTx, jobList []*JobT) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreInTx", tx, jobList)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreInTx indicates an expected call of StoreInTx.
func (mr *MockJobsDBMockRecorder) StoreInTx(tx, jobList interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreInTx", reflect.TypeOf((*MockJobsDB)(nil).StoreInTx), tx, jobList)
}

// StoreWithRetryEach mocks base method.
func (m *MockJobsDB) StoreWithRetryEach(jobList []*JobT) map[uuid.UUID]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreWithRetryEach", jobList)
	ret0, _ := ret[0].(map[uuid.UUID]string)
	return ret0
}

// StoreWithRetryEach indicates an expected call of StoreWithRetryEach.
func (mr *MockJobsDBMockRecorder) StoreWithRetryEach(jobList interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreWithRetryEach", reflect.TypeOf((*MockJobsDB)(nil).StoreWithRetryEach), jobList)
}

// StoreWithRetryEachInTx mocks base method.
func (m *MockJobsDB) StoreWithRetryEachInTx(tx StoreSafeTx, jobList []*JobT) map[uuid.UUID]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreWithRetryEachInTx", tx, jobList)
	ret0, _ := ret[0].(map[uuid.UUID]string)
	return ret0
}

// StoreWithRetryEachInTx indicates an expected call of StoreWithRetryEachInTx.
func (mr *MockJobsDBMockRecorder) StoreWithRetryEachInTx(tx, jobList interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreWithRetryEachInTx", reflect.TypeOf((*MockJobsDB)(nil).StoreWithRetryEachInTx), tx, jobList)
}

// TearDown mocks base method.
func (m *MockJobsDB) TearDown() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TearDown")
}

// TearDown indicates an expected call of TearDown.
func (mr *MockJobsDBMockRecorder) TearDown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TearDown", reflect.TypeOf((*MockJobsDB)(nil).TearDown))
}

// UpdateJobStatus mocks base method.
func (m *MockJobsDB) UpdateJobStatus(statusList []*JobStatusT, customValFilters []string, parameterFilters []ParameterFilterT) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJobStatus", statusList, customValFilters, parameterFilters)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateJobStatus indicates an expected call of UpdateJobStatus.
func (mr *MockJobsDBMockRecorder) UpdateJobStatus(statusList, customValFilters, parameterFilters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJobStatus", reflect.TypeOf((*MockJobsDB)(nil).UpdateJobStatus), statusList, customValFilters, parameterFilters)
}

// UpdateJobStatusInTx mocks base method.
func (m *MockJobsDB) UpdateJobStatusInTx(txHandler UpdateSafeTx, statusList []*JobStatusT, customValFilters []string, parameterFilters []ParameterFilterT) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJobStatusInTx", txHandler, statusList, customValFilters, parameterFilters)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateJobStatusInTx indicates an expected call of UpdateJobStatusInTx.
func (mr *MockJobsDBMockRecorder) UpdateJobStatusInTx(txHandler, statusList, customValFilters, parameterFilters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJobStatusInTx", reflect.TypeOf((*MockJobsDB)(nil).UpdateJobStatusInTx), txHandler, statusList, customValFilters, parameterFilters)
}

// WithStoreSafeTx mocks base method.
func (m *MockJobsDB) WithStoreSafeTx(arg0 func(StoreSafeTx) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithStoreSafeTx", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithStoreSafeTx indicates an expected call of WithStoreSafeTx.
func (mr *MockJobsDBMockRecorder) WithStoreSafeTx(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithStoreSafeTx", reflect.TypeOf((*MockJobsDB)(nil).WithStoreSafeTx), arg0)
}

// WithTx mocks base method.
func (m *MockJobsDB) WithTx(arg0 func(Tx) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithTx indicates an expected call of WithTx.
func (mr *MockJobsDBMockRecorder) WithTx(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockJobsDB)(nil).WithTx), arg0)
}

// WithUpdateSafeTx mocks base method.
func (m *MockJobsDB) WithUpdateSafeTx(arg0 func(UpdateSafeTx) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithUpdateSafeTx", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithUpdateSafeTx indicates an expected call of WithUpdateSafeTx.
func (mr *MockJobsDBMockRecorder) WithUpdateSafeTx(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithUpdateSafeTx", reflect.TypeOf((*MockJobsDB)(nil).WithUpdateSafeTx), arg0)
}

// MockassertInterface is a mock of assertInterface interface.
type MockassertInterface struct {
	ctrl     *gomock.Controller
	recorder *MockassertInterfaceMockRecorder
}

// MockassertInterfaceMockRecorder is the mock recorder for MockassertInterface.
type MockassertInterfaceMockRecorder struct {
	mock *MockassertInterface
}

// NewMockassertInterface creates a new mock instance.
func NewMockassertInterface(ctrl *gomock.Controller) *MockassertInterface {
	mock := &MockassertInterface{ctrl: ctrl}
	mock.recorder = &MockassertInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockassertInterface) EXPECT() *MockassertInterfaceMockRecorder {
	return m.recorder
}

// assert mocks base method.
func (m *MockassertInterface) assert(cond bool, errorString string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "assert", cond, errorString)
}

// assert indicates an expected call of assert.
func (mr *MockassertInterfaceMockRecorder) assert(cond, errorString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "assert", reflect.TypeOf((*MockassertInterface)(nil).assert), cond, errorString)
}

// assertError mocks base method.
func (m *MockassertInterface) assertError(err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "assertError", err)
}

// assertError indicates an expected call of assertError.
func (mr *MockassertInterfaceMockRecorder) assertError(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "assertError", reflect.TypeOf((*MockassertInterface)(nil).assertError), err)
}

// MocktransactionHandler is a mock of transactionHandler interface.
type MocktransactionHandler struct {
	ctrl     *gomock.Controller
	recorder *MocktransactionHandlerMockRecorder
}

// MocktransactionHandlerMockRecorder is the mock recorder for MocktransactionHandler.
type MocktransactionHandlerMockRecorder struct {
	mock *MocktransactionHandler
}

// NewMocktransactionHandler creates a new mock instance.
func NewMocktransactionHandler(ctrl *gomock.Controller) *MocktransactionHandler {
	mock := &MocktransactionHandler{ctrl: ctrl}
	mock.recorder = &MocktransactionHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktransactionHandler) EXPECT() *MocktransactionHandlerMockRecorder {
	return m.recorder
}

// Exec mocks base method.
func (m *MocktransactionHandler) Exec(arg0 string, arg1 ...interface{}) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MocktransactionHandlerMockRecorder) Exec(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MocktransactionHandler)(nil).Exec), varargs...)
}

// Prepare mocks base method.
func (m *MocktransactionHandler) Prepare(query string) (*sql.Stmt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prepare", query)
	ret0, _ := ret[0].(*sql.Stmt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Prepare indicates an expected call of Prepare.
func (mr *MocktransactionHandlerMockRecorder) Prepare(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prepare", reflect.TypeOf((*MocktransactionHandler)(nil).Prepare), query)
}
