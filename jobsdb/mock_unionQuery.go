// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rudderlabs/rudder-server/jobsdb (interfaces: MultiTenantJobsDB)

// Package jobsdb is a generated GoMock package.
package jobsdb

import (
	json "encoding/json"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
)

// MockMultiTenantJobsDB is a mock of MultiTenantJobsDB interface.
type MockMultiTenantJobsDB struct {
	ctrl     *gomock.Controller
	recorder *MockMultiTenantJobsDBMockRecorder
}

// MockMultiTenantJobsDBMockRecorder is the mock recorder for MockMultiTenantJobsDB.
type MockMultiTenantJobsDBMockRecorder struct {
	mock *MockMultiTenantJobsDB
}

// NewMockMultiTenantJobsDB creates a new mock instance.
func NewMockMultiTenantJobsDB(ctrl *gomock.Controller) *MockMultiTenantJobsDB {
	mock := &MockMultiTenantJobsDB{ctrl: ctrl}
	mock.recorder = &MockMultiTenantJobsDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMultiTenantJobsDB) EXPECT() *MockMultiTenantJobsDBMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockMultiTenantJobsDB) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockMultiTenantJobsDBMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockMultiTenantJobsDB)(nil).Close))
}

// DeleteExecuting mocks base method.
func (m *MockMultiTenantJobsDB) DeleteExecuting() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteExecuting")
}

// DeleteExecuting indicates an expected call of DeleteExecuting.
func (mr *MockMultiTenantJobsDBMockRecorder) DeleteExecuting() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExecuting", reflect.TypeOf((*MockMultiTenantJobsDB)(nil).DeleteExecuting))
}

// GetAllJobs mocks base method.
func (m *MockMultiTenantJobsDB) GetAllJobs(arg0 map[string]int, arg1 GetQueryParamsT, arg2 int) []*JobT {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllJobs", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*JobT)
	return ret0
}

// GetAllJobs indicates an expected call of GetAllJobs.
func (mr *MockMultiTenantJobsDBMockRecorder) GetAllJobs(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllJobs", reflect.TypeOf((*MockMultiTenantJobsDB)(nil).GetAllJobs), arg0, arg1, arg2)
}

// GetExecuting mocks base method.
func (m *MockMultiTenantJobsDB) GetExecuting(arg0 GetQueryParamsT) []*JobT {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExecuting", arg0)
	ret0, _ := ret[0].([]*JobT)
	return ret0
}

// GetExecuting indicates an expected call of GetExecuting.
func (mr *MockMultiTenantJobsDBMockRecorder) GetExecuting(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecuting", reflect.TypeOf((*MockMultiTenantJobsDB)(nil).GetExecuting), arg0)
}

// GetImporting mocks base method.
func (m *MockMultiTenantJobsDB) GetImporting(arg0 GetQueryParamsT) []*JobT {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImporting", arg0)
	ret0, _ := ret[0].([]*JobT)
	return ret0
}

// GetImporting indicates an expected call of GetImporting.
func (mr *MockMultiTenantJobsDBMockRecorder) GetImporting(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImporting", reflect.TypeOf((*MockMultiTenantJobsDB)(nil).GetImporting), arg0)
}

// GetJournalEntries mocks base method.
func (m *MockMultiTenantJobsDB) GetJournalEntries(arg0 string) []JournalEntryT {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJournalEntries", arg0)
	ret0, _ := ret[0].([]JournalEntryT)
	return ret0
}

// GetJournalEntries indicates an expected call of GetJournalEntries.
func (mr *MockMultiTenantJobsDBMockRecorder) GetJournalEntries(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJournalEntries", reflect.TypeOf((*MockMultiTenantJobsDB)(nil).GetJournalEntries), arg0)
}

// GetPileUpCounts mocks base method.
func (m *MockMultiTenantJobsDB) GetPileUpCounts(arg0 map[string]map[string]int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetPileUpCounts", arg0)
}

// GetPileUpCounts indicates an expected call of GetPileUpCounts.
func (mr *MockMultiTenantJobsDBMockRecorder) GetPileUpCounts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPileUpCounts", reflect.TypeOf((*MockMultiTenantJobsDB)(nil).GetPileUpCounts), arg0)
}

// GetProcessed mocks base method.
func (m *MockMultiTenantJobsDB) GetProcessed(arg0 GetQueryParamsT) []*JobT {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProcessed", arg0)
	ret0, _ := ret[0].([]*JobT)
	return ret0
}

// GetProcessed indicates an expected call of GetProcessed.
func (mr *MockMultiTenantJobsDBMockRecorder) GetProcessed(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProcessed", reflect.TypeOf((*MockMultiTenantJobsDB)(nil).GetProcessed), arg0)
}

// GetToRetry mocks base method.
func (m *MockMultiTenantJobsDB) GetToRetry(arg0 GetQueryParamsT) []*JobT {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToRetry", arg0)
	ret0, _ := ret[0].([]*JobT)
	return ret0
}

// GetToRetry indicates an expected call of GetToRetry.
func (mr *MockMultiTenantJobsDBMockRecorder) GetToRetry(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToRetry", reflect.TypeOf((*MockMultiTenantJobsDB)(nil).GetToRetry), arg0)
}

// GetUnprocessed mocks base method.
func (m *MockMultiTenantJobsDB) GetUnprocessed(arg0 GetQueryParamsT) []*JobT {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnprocessed", arg0)
	ret0, _ := ret[0].([]*JobT)
	return ret0
}

// GetUnprocessed indicates an expected call of GetUnprocessed.
func (mr *MockMultiTenantJobsDBMockRecorder) GetUnprocessed(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnprocessed", reflect.TypeOf((*MockMultiTenantJobsDB)(nil).GetUnprocessed), arg0)
}

// GetWaiting mocks base method.
func (m *MockMultiTenantJobsDB) GetWaiting(arg0 GetQueryParamsT) []*JobT {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWaiting", arg0)
	ret0, _ := ret[0].([]*JobT)
	return ret0
}

// GetWaiting indicates an expected call of GetWaiting.
func (mr *MockMultiTenantJobsDBMockRecorder) GetWaiting(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWaiting", reflect.TypeOf((*MockMultiTenantJobsDB)(nil).GetWaiting), arg0)
}

// HandleT mocks base method.
func (m *MockMultiTenantJobsDB) HandleT() *HandleT {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleT")
	ret0, _ := ret[0].(*HandleT)
	return ret0
}

// HandleT indicates an expected call of HandleT.
func (mr *MockMultiTenantJobsDBMockRecorder) HandleT() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleT", reflect.TypeOf((*MockMultiTenantJobsDB)(nil).HandleT))
}

// Identifier mocks base method.
func (m *MockMultiTenantJobsDB) Identifier() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Identifier")
	ret0, _ := ret[0].(string)
	return ret0
}

// Identifier indicates an expected call of Identifier.
func (mr *MockMultiTenantJobsDBMockRecorder) Identifier() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Identifier", reflect.TypeOf((*MockMultiTenantJobsDB)(nil).Identifier))
}

// JournalDeleteEntry mocks base method.
func (m *MockMultiTenantJobsDB) JournalDeleteEntry(arg0 int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "JournalDeleteEntry", arg0)
}

// JournalDeleteEntry indicates an expected call of JournalDeleteEntry.
func (mr *MockMultiTenantJobsDBMockRecorder) JournalDeleteEntry(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JournalDeleteEntry", reflect.TypeOf((*MockMultiTenantJobsDB)(nil).JournalDeleteEntry), arg0)
}

// JournalMarkStart mocks base method.
func (m *MockMultiTenantJobsDB) JournalMarkStart(arg0 string, arg1 json.RawMessage) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JournalMarkStart", arg0, arg1)
	ret0, _ := ret[0].(int64)
	return ret0
}

// JournalMarkStart indicates an expected call of JournalMarkStart.
func (mr *MockMultiTenantJobsDBMockRecorder) JournalMarkStart(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JournalMarkStart", reflect.TypeOf((*MockMultiTenantJobsDB)(nil).JournalMarkStart), arg0, arg1)
}

// Ping mocks base method.
func (m *MockMultiTenantJobsDB) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockMultiTenantJobsDBMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockMultiTenantJobsDB)(nil).Ping))
}

// Start mocks base method.
func (m *MockMultiTenantJobsDB) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockMultiTenantJobsDBMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockMultiTenantJobsDB)(nil).Start))
}

// Status mocks base method.
func (m *MockMultiTenantJobsDB) Status() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Status indicates an expected call of Status.
func (mr *MockMultiTenantJobsDBMockRecorder) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockMultiTenantJobsDB)(nil).Status))
}

// Stop mocks base method.
func (m *MockMultiTenantJobsDB) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockMultiTenantJobsDBMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockMultiTenantJobsDB)(nil).Stop))
}

// Store mocks base method.
func (m *MockMultiTenantJobsDB) Store(arg0 []*JobT) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockMultiTenantJobsDBMockRecorder) Store(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockMultiTenantJobsDB)(nil).Store), arg0)
}

// StoreInTx mocks base method.
func (m *MockMultiTenantJobsDB) StoreInTx(arg0 StoreSafeTx, arg1 []*JobT) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreInTx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreInTx indicates an expected call of StoreInTx.
func (mr *MockMultiTenantJobsDBMockRecorder) StoreInTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreInTx", reflect.TypeOf((*MockMultiTenantJobsDB)(nil).StoreInTx), arg0, arg1)
}

// StoreWithRetryEach mocks base method.
func (m *MockMultiTenantJobsDB) StoreWithRetryEach(arg0 []*JobT) map[uuid.UUID]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreWithRetryEach", arg0)
	ret0, _ := ret[0].(map[uuid.UUID]string)
	return ret0
}

// StoreWithRetryEach indicates an expected call of StoreWithRetryEach.
func (mr *MockMultiTenantJobsDBMockRecorder) StoreWithRetryEach(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreWithRetryEach", reflect.TypeOf((*MockMultiTenantJobsDB)(nil).StoreWithRetryEach), arg0)
}

// StoreWithRetryEachInTx mocks base method.
func (m *MockMultiTenantJobsDB) StoreWithRetryEachInTx(arg0 StoreSafeTx, arg1 []*JobT) map[uuid.UUID]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreWithRetryEachInTx", arg0, arg1)
	ret0, _ := ret[0].(map[uuid.UUID]string)
	return ret0
}

// StoreWithRetryEachInTx indicates an expected call of StoreWithRetryEachInTx.
func (mr *MockMultiTenantJobsDBMockRecorder) StoreWithRetryEachInTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreWithRetryEachInTx", reflect.TypeOf((*MockMultiTenantJobsDB)(nil).StoreWithRetryEachInTx), arg0, arg1)
}

// TearDown mocks base method.
func (m *MockMultiTenantJobsDB) TearDown() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TearDown")
}

// TearDown indicates an expected call of TearDown.
func (mr *MockMultiTenantJobsDBMockRecorder) TearDown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TearDown", reflect.TypeOf((*MockMultiTenantJobsDB)(nil).TearDown))
}

// UpdateJobStatus mocks base method.
func (m *MockMultiTenantJobsDB) UpdateJobStatus(arg0 []*JobStatusT, arg1 []string, arg2 []ParameterFilterT) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJobStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateJobStatus indicates an expected call of UpdateJobStatus.
func (mr *MockMultiTenantJobsDBMockRecorder) UpdateJobStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJobStatus", reflect.TypeOf((*MockMultiTenantJobsDB)(nil).UpdateJobStatus), arg0, arg1, arg2)
}

// UpdateJobStatusInTx mocks base method.
func (m *MockMultiTenantJobsDB) UpdateJobStatusInTx(arg0 UpdateSafeTx, arg1 []*JobStatusT, arg2 []string, arg3 []ParameterFilterT) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJobStatusInTx", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateJobStatusInTx indicates an expected call of UpdateJobStatusInTx.
func (mr *MockMultiTenantJobsDBMockRecorder) UpdateJobStatusInTx(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJobStatusInTx", reflect.TypeOf((*MockMultiTenantJobsDB)(nil).UpdateJobStatusInTx), arg0, arg1, arg2, arg3)
}

// WithStoreSafeTx mocks base method.
func (m *MockMultiTenantJobsDB) WithStoreSafeTx(arg0 func(StoreSafeTx) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithStoreSafeTx", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithStoreSafeTx indicates an expected call of WithStoreSafeTx.
func (mr *MockMultiTenantJobsDBMockRecorder) WithStoreSafeTx(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithStoreSafeTx", reflect.TypeOf((*MockMultiTenantJobsDB)(nil).WithStoreSafeTx), arg0)
}

// WithTx mocks base method.
func (m *MockMultiTenantJobsDB) WithTx(arg0 func(Tx) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithTx indicates an expected call of WithTx.
func (mr *MockMultiTenantJobsDBMockRecorder) WithTx(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockMultiTenantJobsDB)(nil).WithTx), arg0)
}

// WithUpdateSafeTx mocks base method.
func (m *MockMultiTenantJobsDB) WithUpdateSafeTx(arg0 func(UpdateSafeTx) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithUpdateSafeTx", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithUpdateSafeTx indicates an expected call of WithUpdateSafeTx.
func (mr *MockMultiTenantJobsDBMockRecorder) WithUpdateSafeTx(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithUpdateSafeTx", reflect.TypeOf((*MockMultiTenantJobsDB)(nil).WithUpdateSafeTx), arg0)
}
