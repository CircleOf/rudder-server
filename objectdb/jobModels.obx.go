// Code generated by ObjectBox; DO NOT EDIT.
// Learn more about defining entities and generating this file - visit https://golang.objectbox.io/entity-annotations

package objectdb

import (
	"encoding/json"
	"errors"
	"github.com/google/flatbuffers/go"
	"github.com/objectbox/objectbox-go/objectbox"
	"github.com/objectbox/objectbox-go/objectbox/fbutils"
)

type job_EntityInfo struct {
	objectbox.Entity
	Uid uint64
}

var JobBinding = job_EntityInfo{
	Entity: objectbox.Entity{
		Id: 16,
	},
	Uid: 7880673957832506429,
}

// Job_ contains type-based Property helpers to facilitate some common operations such as Queries.
var Job_ = struct {
	JobID                   *objectbox.PropertyUint64
	UserID                  *objectbox.RelationToOne
	CustomVal               *objectbox.RelationToOne
	JobState                *objectbox.RelationToOne
	WorkspaceID             *objectbox.RelationToOne
	CreatedAt               *objectbox.PropertyInt64
	ExpireAt                *objectbox.PropertyInt64
	EventCount              *objectbox.PropertyInt
	EventPayload            *objectbox.PropertyByteVector
	PayloadSize             *objectbox.PropertyInt64
	ExecTime                *objectbox.PropertyInt64
	RetryTime               *objectbox.PropertyInt64
	ErrorResponse           *objectbox.PropertyByteVector
	SourceID                *objectbox.RelationToOne
	DestinationID           *objectbox.RelationToOne
	SourceBatchID           *objectbox.RelationToOne
	SourceTaskID            *objectbox.RelationToOne
	SourceTaskRunID         *objectbox.RelationToOne
	SourceJobID             *objectbox.RelationToOne
	SourceJobRunID          *objectbox.RelationToOne
	SourceDefinitionID      *objectbox.RelationToOne
	DestinationDefinitionID *objectbox.RelationToOne
	SourceCategory          *objectbox.RelationToOne
}{
	JobID: &objectbox.PropertyUint64{
		BaseProperty: &objectbox.BaseProperty{
			Id:     1,
			Entity: &JobBinding.Entity,
		},
	},
	UserID: &objectbox.RelationToOne{
		Property: &objectbox.BaseProperty{
			Id:     2,
			Entity: &JobBinding.Entity,
		},
		Target: &UserIDBinding.Entity,
	},
	CustomVal: &objectbox.RelationToOne{
		Property: &objectbox.BaseProperty{
			Id:     3,
			Entity: &JobBinding.Entity,
		},
		Target: &CustomValBinding.Entity,
	},
	JobState: &objectbox.RelationToOne{
		Property: &objectbox.BaseProperty{
			Id:     4,
			Entity: &JobBinding.Entity,
		},
		Target: &JobStateBinding.Entity,
	},
	WorkspaceID: &objectbox.RelationToOne{
		Property: &objectbox.BaseProperty{
			Id:     5,
			Entity: &JobBinding.Entity,
		},
		Target: &WorkspaceIDBinding.Entity,
	},
	CreatedAt: &objectbox.PropertyInt64{
		BaseProperty: &objectbox.BaseProperty{
			Id:     6,
			Entity: &JobBinding.Entity,
		},
	},
	ExpireAt: &objectbox.PropertyInt64{
		BaseProperty: &objectbox.BaseProperty{
			Id:     7,
			Entity: &JobBinding.Entity,
		},
	},
	EventCount: &objectbox.PropertyInt{
		BaseProperty: &objectbox.BaseProperty{
			Id:     8,
			Entity: &JobBinding.Entity,
		},
	},
	EventPayload: &objectbox.PropertyByteVector{
		BaseProperty: &objectbox.BaseProperty{
			Id:     9,
			Entity: &JobBinding.Entity,
		},
	},
	PayloadSize: &objectbox.PropertyInt64{
		BaseProperty: &objectbox.BaseProperty{
			Id:     10,
			Entity: &JobBinding.Entity,
		},
	},
	ExecTime: &objectbox.PropertyInt64{
		BaseProperty: &objectbox.BaseProperty{
			Id:     11,
			Entity: &JobBinding.Entity,
		},
	},
	RetryTime: &objectbox.PropertyInt64{
		BaseProperty: &objectbox.BaseProperty{
			Id:     12,
			Entity: &JobBinding.Entity,
		},
	},
	ErrorResponse: &objectbox.PropertyByteVector{
		BaseProperty: &objectbox.BaseProperty{
			Id:     13,
			Entity: &JobBinding.Entity,
		},
	},
	SourceID: &objectbox.RelationToOne{
		Property: &objectbox.BaseProperty{
			Id:     14,
			Entity: &JobBinding.Entity,
		},
		Target: &SourceIDBinding.Entity,
	},
	DestinationID: &objectbox.RelationToOne{
		Property: &objectbox.BaseProperty{
			Id:     15,
			Entity: &JobBinding.Entity,
		},
		Target: &DestinationIDBinding.Entity,
	},
	SourceBatchID: &objectbox.RelationToOne{
		Property: &objectbox.BaseProperty{
			Id:     16,
			Entity: &JobBinding.Entity,
		},
		Target: &SourceBatchIDBinding.Entity,
	},
	SourceTaskID: &objectbox.RelationToOne{
		Property: &objectbox.BaseProperty{
			Id:     17,
			Entity: &JobBinding.Entity,
		},
		Target: &SourceTaskIDBinding.Entity,
	},
	SourceTaskRunID: &objectbox.RelationToOne{
		Property: &objectbox.BaseProperty{
			Id:     18,
			Entity: &JobBinding.Entity,
		},
		Target: &SourceTaskRunIDBinding.Entity,
	},
	SourceJobID: &objectbox.RelationToOne{
		Property: &objectbox.BaseProperty{
			Id:     19,
			Entity: &JobBinding.Entity,
		},
		Target: &SourceJobIDBinding.Entity,
	},
	SourceJobRunID: &objectbox.RelationToOne{
		Property: &objectbox.BaseProperty{
			Id:     20,
			Entity: &JobBinding.Entity,
		},
		Target: &SourceJobRunIDBinding.Entity,
	},
	SourceDefinitionID: &objectbox.RelationToOne{
		Property: &objectbox.BaseProperty{
			Id:     21,
			Entity: &JobBinding.Entity,
		},
		Target: &SourceDefinitionIDBinding.Entity,
	},
	DestinationDefinitionID: &objectbox.RelationToOne{
		Property: &objectbox.BaseProperty{
			Id:     22,
			Entity: &JobBinding.Entity,
		},
		Target: &DestinationDefinitionIDBinding.Entity,
	},
	SourceCategory: &objectbox.RelationToOne{
		Property: &objectbox.BaseProperty{
			Id:     23,
			Entity: &JobBinding.Entity,
		},
		Target: &SourceCategoryBinding.Entity,
	},
}

// GeneratorVersion is called by ObjectBox to verify the compatibility of the generator used to generate this code
func (job_EntityInfo) GeneratorVersion() int {
	return 6
}

// AddToModel is called by ObjectBox during model build
func (job_EntityInfo) AddToModel(model *objectbox.Model) {
	model.Entity("Job", 16, 7880673957832506429)
	model.Property("JobID", 6, 1, 7969772827096941241)
	model.PropertyFlags(1)
	model.Property("UserID", 11, 2, 7588751206228640667)
	model.PropertyFlags(520)
	model.PropertyRelation("UserID", 20, 4414089889888748038)
	model.Property("CustomVal", 11, 3, 3462541910726922130)
	model.PropertyFlags(520)
	model.PropertyRelation("CustomVal", 21, 2873142588229165955)
	model.Property("JobState", 11, 4, 395190331203933344)
	model.PropertyFlags(520)
	model.PropertyRelation("JobState", 22, 4134436487801700472)
	model.Property("WorkspaceID", 11, 5, 1581825499984710631)
	model.PropertyFlags(520)
	model.PropertyRelation("WorkspaceID", 23, 6530434952105257634)
	model.Property("CreatedAt", 10, 6, 3995594485594684290)
	model.Property("ExpireAt", 10, 7, 724460597643260267)
	model.Property("EventCount", 6, 8, 2553291090942188326)
	model.Property("EventPayload", 23, 9, 5499501303551339661)
	model.Property("PayloadSize", 6, 10, 6416538703239855114)
	model.Property("ExecTime", 10, 11, 8386004811469364224)
	model.Property("RetryTime", 10, 12, 5316805143678259589)
	model.Property("ErrorResponse", 23, 13, 3265501328358133292)
	model.Property("SourceID", 11, 14, 4337297122683846055)
	model.PropertyFlags(520)
	model.PropertyRelation("SourceID", 24, 2371829482357709014)
	model.Property("DestinationID", 11, 15, 6571244647817021745)
	model.PropertyFlags(520)
	model.PropertyRelation("DestinationID", 25, 8524296239986249001)
	model.Property("SourceBatchID", 11, 16, 1327441298800361354)
	model.PropertyFlags(520)
	model.PropertyRelation("SourceBatchID", 26, 8059679128021009227)
	model.Property("SourceTaskID", 11, 17, 4178473892907898651)
	model.PropertyFlags(520)
	model.PropertyRelation("SourceTaskID", 27, 7007312828969698467)
	model.Property("SourceTaskRunID", 11, 18, 124618207042612366)
	model.PropertyFlags(520)
	model.PropertyRelation("SourceTaskRunID", 28, 5625208667882052163)
	model.Property("SourceJobID", 11, 19, 5112143233311809181)
	model.PropertyFlags(520)
	model.PropertyRelation("SourceJobID", 29, 243025717867575030)
	model.Property("SourceJobRunID", 11, 20, 6323209688154488438)
	model.PropertyFlags(520)
	model.PropertyRelation("SourceJobRunID", 30, 4442583093847521513)
	model.Property("SourceDefinitionID", 11, 21, 6160522656637443393)
	model.PropertyFlags(520)
	model.PropertyRelation("SourceDefinitionID", 31, 1647864756079493504)
	model.Property("DestinationDefinitionID", 11, 22, 5707101111669797171)
	model.PropertyFlags(520)
	model.PropertyRelation("DestinationDefinitionID", 32, 8695501406169389645)
	model.Property("SourceCategory", 11, 23, 364350968988842336)
	model.PropertyFlags(520)
	model.PropertyRelation("SourceCategory", 33, 4540676276401439000)
	model.EntityLastPropertyId(23, 364350968988842336)
}

// GetId is called by ObjectBox during Put operations to check for existing ID on an object
func (job_EntityInfo) GetId(object interface{}) (uint64, error) {
	return object.(*Job).JobID, nil
}

// SetId is called by ObjectBox during Put to update an ID on an object that has just been inserted
func (job_EntityInfo) SetId(object interface{}, id uint64) error {
	object.(*Job).JobID = id
	return nil
}

// PutRelated is called by ObjectBox to put related entities before the object itself is flattened and put
func (job_EntityInfo) PutRelated(ob *objectbox.ObjectBox, object interface{}, id uint64) error {
	if rel := object.(*Job).UserID; rel != nil {
		if rId, err := UserIDBinding.GetId(rel); err != nil {
			return err
		} else if rId == 0 {
			// NOTE Put/PutAsync() has a side-effect of setting the rel.ID
			if _, err := BoxForUserID(ob).Put(rel); err != nil {
				return err
			}
		}
	}
	if rel := object.(*Job).CustomVal; rel != nil {
		if rId, err := CustomValBinding.GetId(rel); err != nil {
			return err
		} else if rId == 0 {
			// NOTE Put/PutAsync() has a side-effect of setting the rel.ID
			if _, err := BoxForCustomVal(ob).Put(rel); err != nil {
				return err
			}
		}
	}
	if rel := object.(*Job).JobState; rel != nil {
		if rId, err := JobStateBinding.GetId(rel); err != nil {
			return err
		} else if rId == 0 {
			// NOTE Put/PutAsync() has a side-effect of setting the rel.ID
			if _, err := BoxForJobState(ob).Put(rel); err != nil {
				return err
			}
		}
	}
	if rel := object.(*Job).WorkspaceID; rel != nil {
		if rId, err := WorkspaceIDBinding.GetId(rel); err != nil {
			return err
		} else if rId == 0 {
			// NOTE Put/PutAsync() has a side-effect of setting the rel.ID
			if _, err := BoxForWorkspaceID(ob).Put(rel); err != nil {
				return err
			}
		}
	}
	if rel := object.(*Job).SourceID; rel != nil {
		if rId, err := SourceIDBinding.GetId(rel); err != nil {
			return err
		} else if rId == 0 {
			// NOTE Put/PutAsync() has a side-effect of setting the rel.ID
			if _, err := BoxForSourceID(ob).Put(rel); err != nil {
				return err
			}
		}
	}
	if rel := object.(*Job).DestinationID; rel != nil {
		if rId, err := DestinationIDBinding.GetId(rel); err != nil {
			return err
		} else if rId == 0 {
			// NOTE Put/PutAsync() has a side-effect of setting the rel.ID
			if _, err := BoxForDestinationID(ob).Put(rel); err != nil {
				return err
			}
		}
	}
	if rel := object.(*Job).SourceBatchID; rel != nil {
		if rId, err := SourceBatchIDBinding.GetId(rel); err != nil {
			return err
		} else if rId == 0 {
			// NOTE Put/PutAsync() has a side-effect of setting the rel.ID
			if _, err := BoxForSourceBatchID(ob).Put(rel); err != nil {
				return err
			}
		}
	}
	if rel := object.(*Job).SourceTaskID; rel != nil {
		if rId, err := SourceTaskIDBinding.GetId(rel); err != nil {
			return err
		} else if rId == 0 {
			// NOTE Put/PutAsync() has a side-effect of setting the rel.ID
			if _, err := BoxForSourceTaskID(ob).Put(rel); err != nil {
				return err
			}
		}
	}
	if rel := object.(*Job).SourceTaskRunID; rel != nil {
		if rId, err := SourceTaskRunIDBinding.GetId(rel); err != nil {
			return err
		} else if rId == 0 {
			// NOTE Put/PutAsync() has a side-effect of setting the rel.ID
			if _, err := BoxForSourceTaskRunID(ob).Put(rel); err != nil {
				return err
			}
		}
	}
	if rel := object.(*Job).SourceJobID; rel != nil {
		if rId, err := SourceJobIDBinding.GetId(rel); err != nil {
			return err
		} else if rId == 0 {
			// NOTE Put/PutAsync() has a side-effect of setting the rel.ID
			if _, err := BoxForSourceJobID(ob).Put(rel); err != nil {
				return err
			}
		}
	}
	if rel := object.(*Job).SourceJobRunID; rel != nil {
		if rId, err := SourceJobRunIDBinding.GetId(rel); err != nil {
			return err
		} else if rId == 0 {
			// NOTE Put/PutAsync() has a side-effect of setting the rel.ID
			if _, err := BoxForSourceJobRunID(ob).Put(rel); err != nil {
				return err
			}
		}
	}
	if rel := object.(*Job).SourceDefinitionID; rel != nil {
		if rId, err := SourceDefinitionIDBinding.GetId(rel); err != nil {
			return err
		} else if rId == 0 {
			// NOTE Put/PutAsync() has a side-effect of setting the rel.ID
			if _, err := BoxForSourceDefinitionID(ob).Put(rel); err != nil {
				return err
			}
		}
	}
	if rel := object.(*Job).DestinationDefinitionID; rel != nil {
		if rId, err := DestinationDefinitionIDBinding.GetId(rel); err != nil {
			return err
		} else if rId == 0 {
			// NOTE Put/PutAsync() has a side-effect of setting the rel.ID
			if _, err := BoxForDestinationDefinitionID(ob).Put(rel); err != nil {
				return err
			}
		}
	}
	if rel := object.(*Job).SourceCategory; rel != nil {
		if rId, err := SourceCategoryBinding.GetId(rel); err != nil {
			return err
		} else if rId == 0 {
			// NOTE Put/PutAsync() has a side-effect of setting the rel.ID
			if _, err := BoxForSourceCategory(ob).Put(rel); err != nil {
				return err
			}
		}
	}
	return nil
}

// Flatten is called by ObjectBox to transform an object to a FlatBuffer
func (job_EntityInfo) Flatten(object interface{}, fbb *flatbuffers.Builder, id uint64) error {
	obj := object.(*Job)
	var propCreatedAt int64
	{
		var err error
		propCreatedAt, err = objectbox.TimeInt64ConvertToDatabaseValue(obj.CreatedAt)
		if err != nil {
			return errors.New("converter objectbox.TimeInt64ConvertToDatabaseValue() failed on Job.CreatedAt: " + err.Error())
		}
	}

	var propExpireAt int64
	{
		var err error
		propExpireAt, err = objectbox.TimeInt64ConvertToDatabaseValue(obj.ExpireAt)
		if err != nil {
			return errors.New("converter objectbox.TimeInt64ConvertToDatabaseValue() failed on Job.ExpireAt: " + err.Error())
		}
	}

	var propExecTime int64
	{
		var err error
		propExecTime, err = objectbox.TimeInt64ConvertToDatabaseValue(obj.ExecTime)
		if err != nil {
			return errors.New("converter objectbox.TimeInt64ConvertToDatabaseValue() failed on Job.ExecTime: " + err.Error())
		}
	}

	var propRetryTime int64
	{
		var err error
		propRetryTime, err = objectbox.TimeInt64ConvertToDatabaseValue(obj.RetryTime)
		if err != nil {
			return errors.New("converter objectbox.TimeInt64ConvertToDatabaseValue() failed on Job.RetryTime: " + err.Error())
		}
	}

	var offsetEventPayload = fbutils.CreateByteVectorOffset(fbb, []byte(obj.EventPayload))
	var offsetErrorResponse = fbutils.CreateByteVectorOffset(fbb, []byte(obj.ErrorResponse))

	var rIdUserID uint64
	if rel := obj.UserID; rel != nil {
		if rId, err := UserIDBinding.GetId(rel); err != nil {
			return err
		} else {
			rIdUserID = rId
		}
	}

	var rIdCustomVal uint64
	if rel := obj.CustomVal; rel != nil {
		if rId, err := CustomValBinding.GetId(rel); err != nil {
			return err
		} else {
			rIdCustomVal = rId
		}
	}

	var rIdJobState uint64
	if rel := obj.JobState; rel != nil {
		if rId, err := JobStateBinding.GetId(rel); err != nil {
			return err
		} else {
			rIdJobState = rId
		}
	}

	var rIdWorkspaceID uint64
	if rel := obj.WorkspaceID; rel != nil {
		if rId, err := WorkspaceIDBinding.GetId(rel); err != nil {
			return err
		} else {
			rIdWorkspaceID = rId
		}
	}

	var rIdSourceID uint64
	if rel := obj.SourceID; rel != nil {
		if rId, err := SourceIDBinding.GetId(rel); err != nil {
			return err
		} else {
			rIdSourceID = rId
		}
	}

	var rIdDestinationID uint64
	if rel := obj.DestinationID; rel != nil {
		if rId, err := DestinationIDBinding.GetId(rel); err != nil {
			return err
		} else {
			rIdDestinationID = rId
		}
	}

	var rIdSourceBatchID uint64
	if rel := obj.SourceBatchID; rel != nil {
		if rId, err := SourceBatchIDBinding.GetId(rel); err != nil {
			return err
		} else {
			rIdSourceBatchID = rId
		}
	}

	var rIdSourceTaskID uint64
	if rel := obj.SourceTaskID; rel != nil {
		if rId, err := SourceTaskIDBinding.GetId(rel); err != nil {
			return err
		} else {
			rIdSourceTaskID = rId
		}
	}

	var rIdSourceTaskRunID uint64
	if rel := obj.SourceTaskRunID; rel != nil {
		if rId, err := SourceTaskRunIDBinding.GetId(rel); err != nil {
			return err
		} else {
			rIdSourceTaskRunID = rId
		}
	}

	var rIdSourceJobID uint64
	if rel := obj.SourceJobID; rel != nil {
		if rId, err := SourceJobIDBinding.GetId(rel); err != nil {
			return err
		} else {
			rIdSourceJobID = rId
		}
	}

	var rIdSourceJobRunID uint64
	if rel := obj.SourceJobRunID; rel != nil {
		if rId, err := SourceJobRunIDBinding.GetId(rel); err != nil {
			return err
		} else {
			rIdSourceJobRunID = rId
		}
	}

	var rIdSourceDefinitionID uint64
	if rel := obj.SourceDefinitionID; rel != nil {
		if rId, err := SourceDefinitionIDBinding.GetId(rel); err != nil {
			return err
		} else {
			rIdSourceDefinitionID = rId
		}
	}

	var rIdDestinationDefinitionID uint64
	if rel := obj.DestinationDefinitionID; rel != nil {
		if rId, err := DestinationDefinitionIDBinding.GetId(rel); err != nil {
			return err
		} else {
			rIdDestinationDefinitionID = rId
		}
	}

	var rIdSourceCategory uint64
	if rel := obj.SourceCategory; rel != nil {
		if rId, err := SourceCategoryBinding.GetId(rel); err != nil {
			return err
		} else {
			rIdSourceCategory = rId
		}
	}

	// build the FlatBuffers object
	fbb.StartObject(23)
	fbutils.SetUint64Slot(fbb, 0, id)
	if obj.UserID != nil {
		fbutils.SetUint64Slot(fbb, 1, rIdUserID)
	}
	if obj.CustomVal != nil {
		fbutils.SetUint64Slot(fbb, 2, rIdCustomVal)
	}
	if obj.JobState != nil {
		fbutils.SetUint64Slot(fbb, 3, rIdJobState)
	}
	if obj.WorkspaceID != nil {
		fbutils.SetUint64Slot(fbb, 4, rIdWorkspaceID)
	}
	fbutils.SetInt64Slot(fbb, 5, propCreatedAt)
	fbutils.SetInt64Slot(fbb, 6, propExpireAt)
	fbutils.SetInt64Slot(fbb, 7, int64(obj.EventCount))
	fbutils.SetUOffsetTSlot(fbb, 8, offsetEventPayload)
	fbutils.SetInt64Slot(fbb, 9, obj.PayloadSize)
	fbutils.SetInt64Slot(fbb, 10, propExecTime)
	fbutils.SetInt64Slot(fbb, 11, propRetryTime)
	fbutils.SetUOffsetTSlot(fbb, 12, offsetErrorResponse)
	if obj.SourceID != nil {
		fbutils.SetUint64Slot(fbb, 13, rIdSourceID)
	}
	if obj.DestinationID != nil {
		fbutils.SetUint64Slot(fbb, 14, rIdDestinationID)
	}
	if obj.SourceBatchID != nil {
		fbutils.SetUint64Slot(fbb, 15, rIdSourceBatchID)
	}
	if obj.SourceTaskID != nil {
		fbutils.SetUint64Slot(fbb, 16, rIdSourceTaskID)
	}
	if obj.SourceTaskRunID != nil {
		fbutils.SetUint64Slot(fbb, 17, rIdSourceTaskRunID)
	}
	if obj.SourceJobID != nil {
		fbutils.SetUint64Slot(fbb, 18, rIdSourceJobID)
	}
	if obj.SourceJobRunID != nil {
		fbutils.SetUint64Slot(fbb, 19, rIdSourceJobRunID)
	}
	if obj.SourceDefinitionID != nil {
		fbutils.SetUint64Slot(fbb, 20, rIdSourceDefinitionID)
	}
	if obj.DestinationDefinitionID != nil {
		fbutils.SetUint64Slot(fbb, 21, rIdDestinationDefinitionID)
	}
	if obj.SourceCategory != nil {
		fbutils.SetUint64Slot(fbb, 22, rIdSourceCategory)
	}
	return nil
}

// Load is called by ObjectBox to load an object from a FlatBuffer
func (job_EntityInfo) Load(ob *objectbox.ObjectBox, bytes []byte) (interface{}, error) {
	if len(bytes) == 0 { // sanity check, should "never" happen
		return nil, errors.New("can't deserialize an object of type 'Job' - no data received")
	}

	var table = &flatbuffers.Table{
		Bytes: bytes,
		Pos:   flatbuffers.GetUOffsetT(bytes),
	}

	var propJobID = table.GetUint64Slot(4, 0)

	propCreatedAt, err := objectbox.TimeInt64ConvertToEntityProperty(fbutils.GetInt64Slot(table, 14))
	if err != nil {
		return nil, errors.New("converter objectbox.TimeInt64ConvertToEntityProperty() failed on Job.CreatedAt: " + err.Error())
	}

	propExpireAt, err := objectbox.TimeInt64ConvertToEntityProperty(fbutils.GetInt64Slot(table, 16))
	if err != nil {
		return nil, errors.New("converter objectbox.TimeInt64ConvertToEntityProperty() failed on Job.ExpireAt: " + err.Error())
	}

	propExecTime, err := objectbox.TimeInt64ConvertToEntityProperty(fbutils.GetInt64Slot(table, 24))
	if err != nil {
		return nil, errors.New("converter objectbox.TimeInt64ConvertToEntityProperty() failed on Job.ExecTime: " + err.Error())
	}

	propRetryTime, err := objectbox.TimeInt64ConvertToEntityProperty(fbutils.GetInt64Slot(table, 26))
	if err != nil {
		return nil, errors.New("converter objectbox.TimeInt64ConvertToEntityProperty() failed on Job.RetryTime: " + err.Error())
	}

	var relUserID *UserID
	if rId := fbutils.GetUint64PtrSlot(table, 6); rId != nil && *rId > 0 {
		if rObject, err := BoxForUserID(ob).Get(*rId); err != nil {
			return nil, err
		} else {
			relUserID = rObject
		}
	}

	var relCustomVal *CustomVal
	if rId := fbutils.GetUint64PtrSlot(table, 8); rId != nil && *rId > 0 {
		if rObject, err := BoxForCustomVal(ob).Get(*rId); err != nil {
			return nil, err
		} else {
			relCustomVal = rObject
		}
	}

	var relJobState *JobState
	if rId := fbutils.GetUint64PtrSlot(table, 10); rId != nil && *rId > 0 {
		if rObject, err := BoxForJobState(ob).Get(*rId); err != nil {
			return nil, err
		} else {
			relJobState = rObject
		}
	}

	var relWorkspaceID *WorkspaceID
	if rId := fbutils.GetUint64PtrSlot(table, 12); rId != nil && *rId > 0 {
		if rObject, err := BoxForWorkspaceID(ob).Get(*rId); err != nil {
			return nil, err
		} else {
			relWorkspaceID = rObject
		}
	}

	var relSourceID *SourceID
	if rId := fbutils.GetUint64PtrSlot(table, 30); rId != nil && *rId > 0 {
		if rObject, err := BoxForSourceID(ob).Get(*rId); err != nil {
			return nil, err
		} else {
			relSourceID = rObject
		}
	}

	var relDestinationID *DestinationID
	if rId := fbutils.GetUint64PtrSlot(table, 32); rId != nil && *rId > 0 {
		if rObject, err := BoxForDestinationID(ob).Get(*rId); err != nil {
			return nil, err
		} else {
			relDestinationID = rObject
		}
	}

	var relSourceBatchID *SourceBatchID
	if rId := fbutils.GetUint64PtrSlot(table, 34); rId != nil && *rId > 0 {
		if rObject, err := BoxForSourceBatchID(ob).Get(*rId); err != nil {
			return nil, err
		} else {
			relSourceBatchID = rObject
		}
	}

	var relSourceTaskID *SourceTaskID
	if rId := fbutils.GetUint64PtrSlot(table, 36); rId != nil && *rId > 0 {
		if rObject, err := BoxForSourceTaskID(ob).Get(*rId); err != nil {
			return nil, err
		} else {
			relSourceTaskID = rObject
		}
	}

	var relSourceTaskRunID *SourceTaskRunID
	if rId := fbutils.GetUint64PtrSlot(table, 38); rId != nil && *rId > 0 {
		if rObject, err := BoxForSourceTaskRunID(ob).Get(*rId); err != nil {
			return nil, err
		} else {
			relSourceTaskRunID = rObject
		}
	}

	var relSourceJobID *SourceJobID
	if rId := fbutils.GetUint64PtrSlot(table, 40); rId != nil && *rId > 0 {
		if rObject, err := BoxForSourceJobID(ob).Get(*rId); err != nil {
			return nil, err
		} else {
			relSourceJobID = rObject
		}
	}

	var relSourceJobRunID *SourceJobRunID
	if rId := fbutils.GetUint64PtrSlot(table, 42); rId != nil && *rId > 0 {
		if rObject, err := BoxForSourceJobRunID(ob).Get(*rId); err != nil {
			return nil, err
		} else {
			relSourceJobRunID = rObject
		}
	}

	var relSourceDefinitionID *SourceDefinitionID
	if rId := fbutils.GetUint64PtrSlot(table, 44); rId != nil && *rId > 0 {
		if rObject, err := BoxForSourceDefinitionID(ob).Get(*rId); err != nil {
			return nil, err
		} else {
			relSourceDefinitionID = rObject
		}
	}

	var relDestinationDefinitionID *DestinationDefinitionID
	if rId := fbutils.GetUint64PtrSlot(table, 46); rId != nil && *rId > 0 {
		if rObject, err := BoxForDestinationDefinitionID(ob).Get(*rId); err != nil {
			return nil, err
		} else {
			relDestinationDefinitionID = rObject
		}
	}

	var relSourceCategory *SourceCategory
	if rId := fbutils.GetUint64PtrSlot(table, 48); rId != nil && *rId > 0 {
		if rObject, err := BoxForSourceCategory(ob).Get(*rId); err != nil {
			return nil, err
		} else {
			relSourceCategory = rObject
		}
	}

	return &Job{
		JobID:                   propJobID,
		UserID:                  relUserID,
		CustomVal:               relCustomVal,
		JobState:                relJobState,
		WorkspaceID:             relWorkspaceID,
		CreatedAt:               propCreatedAt,
		ExpireAt:                propExpireAt,
		EventCount:              fbutils.GetIntSlot(table, 18),
		EventPayload:            json.RawMessage(fbutils.GetByteVectorSlot(table, 20)),
		PayloadSize:             fbutils.GetInt64Slot(table, 22),
		ExecTime:                propExecTime,
		RetryTime:               propRetryTime,
		ErrorResponse:           json.RawMessage(fbutils.GetByteVectorSlot(table, 28)),
		SourceID:                relSourceID,
		DestinationID:           relDestinationID,
		SourceBatchID:           relSourceBatchID,
		SourceTaskID:            relSourceTaskID,
		SourceTaskRunID:         relSourceTaskRunID,
		SourceJobID:             relSourceJobID,
		SourceJobRunID:          relSourceJobRunID,
		SourceDefinitionID:      relSourceDefinitionID,
		DestinationDefinitionID: relDestinationDefinitionID,
		SourceCategory:          relSourceCategory,
	}, nil
}

// MakeSlice is called by ObjectBox to construct a new slice to hold the read objects
func (job_EntityInfo) MakeSlice(capacity int) interface{} {
	return make([]*Job, 0, capacity)
}

// AppendToSlice is called by ObjectBox to fill the slice of the read objects
func (job_EntityInfo) AppendToSlice(slice interface{}, object interface{}) interface{} {
	if object == nil {
		return append(slice.([]*Job), nil)
	}
	return append(slice.([]*Job), object.(*Job))
}

// Box provides CRUD access to Job objects
type JobBox struct {
	*objectbox.Box
}

// BoxForJob opens a box of Job objects
func BoxForJob(ob *objectbox.ObjectBox) *JobBox {
	return &JobBox{
		Box: ob.InternalBox(16),
	}
}

// Put synchronously inserts/updates a single object.
// In case the JobID is not specified, it would be assigned automatically (auto-increment).
// When inserting, the Job.JobID property on the passed object will be assigned the new ID as well.
func (box *JobBox) Put(object *Job) (uint64, error) {
	return box.Box.Put(object)
}

// Insert synchronously inserts a single object. As opposed to Put, Insert will fail if given an ID that already exists.
// In case the JobID is not specified, it would be assigned automatically (auto-increment).
// When inserting, the Job.JobID property on the passed object will be assigned the new ID as well.
func (box *JobBox) Insert(object *Job) (uint64, error) {
	return box.Box.Insert(object)
}

// Update synchronously updates a single object.
// As opposed to Put, Update will fail if an object with the same ID is not found in the database.
func (box *JobBox) Update(object *Job) error {
	return box.Box.Update(object)
}

// PutAsync asynchronously inserts/updates a single object.
// Deprecated: use box.Async().Put() instead
func (box *JobBox) PutAsync(object *Job) (uint64, error) {
	return box.Box.PutAsync(object)
}

// PutMany inserts multiple objects in single transaction.
// In case JobIDs are not set on the objects, they would be assigned automatically (auto-increment).
//
// Returns: IDs of the put objects (in the same order).
// When inserting, the Job.JobID property on the objects in the slice will be assigned the new IDs as well.
//
// Note: In case an error occurs during the transaction, some of the objects may already have the Job.JobID assigned
// even though the transaction has been rolled back and the objects are not stored under those IDs.
//
// Note: The slice may be empty or even nil; in both cases, an empty IDs slice and no error is returned.
func (box *JobBox) PutMany(objects []*Job) ([]uint64, error) {
	return box.Box.PutMany(objects)
}

// Get reads a single object.
//
// Returns nil (and no error) in case the object with the given ID doesn't exist.
func (box *JobBox) Get(id uint64) (*Job, error) {
	object, err := box.Box.Get(id)
	if err != nil {
		return nil, err
	} else if object == nil {
		return nil, nil
	}
	return object.(*Job), nil
}

// GetMany reads multiple objects at once.
// If any of the objects doesn't exist, its position in the return slice is nil
func (box *JobBox) GetMany(ids ...uint64) ([]*Job, error) {
	objects, err := box.Box.GetMany(ids...)
	if err != nil {
		return nil, err
	}
	return objects.([]*Job), nil
}

// GetManyExisting reads multiple objects at once, skipping those that do not exist.
func (box *JobBox) GetManyExisting(ids ...uint64) ([]*Job, error) {
	objects, err := box.Box.GetManyExisting(ids...)
	if err != nil {
		return nil, err
	}
	return objects.([]*Job), nil
}

// GetAll reads all stored objects
func (box *JobBox) GetAll() ([]*Job, error) {
	objects, err := box.Box.GetAll()
	if err != nil {
		return nil, err
	}
	return objects.([]*Job), nil
}

// Remove deletes a single object
func (box *JobBox) Remove(object *Job) error {
	return box.Box.Remove(object)
}

// RemoveMany deletes multiple objects at once.
// Returns the number of deleted object or error on failure.
// Note that this method will not fail if an object is not found (e.g. already removed).
// In case you need to strictly check whether all of the objects exist before removing them,
// you can execute multiple box.Contains() and box.Remove() inside a single write transaction.
func (box *JobBox) RemoveMany(objects ...*Job) (uint64, error) {
	var ids = make([]uint64, len(objects))
	for k, object := range objects {
		ids[k] = object.JobID
	}
	return box.Box.RemoveIds(ids...)
}

// Creates a query with the given conditions. Use the fields of the Job_ struct to create conditions.
// Keep the *JobQuery if you intend to execute the query multiple times.
// Note: this function panics if you try to create illegal queries; e.g. use properties of an alien type.
// This is typically a programming error. Use QueryOrError instead if you want the explicit error check.
func (box *JobBox) Query(conditions ...objectbox.Condition) *JobQuery {
	return &JobQuery{
		box.Box.Query(conditions...),
	}
}

// Creates a query with the given conditions. Use the fields of the Job_ struct to create conditions.
// Keep the *JobQuery if you intend to execute the query multiple times.
func (box *JobBox) QueryOrError(conditions ...objectbox.Condition) (*JobQuery, error) {
	if query, err := box.Box.QueryOrError(conditions...); err != nil {
		return nil, err
	} else {
		return &JobQuery{query}, nil
	}
}

// Async provides access to the default Async Box for asynchronous operations. See JobAsyncBox for more information.
func (box *JobBox) Async() *JobAsyncBox {
	return &JobAsyncBox{AsyncBox: box.Box.Async()}
}

// JobAsyncBox provides asynchronous operations on Job objects.
//
// Asynchronous operations are executed on a separate internal thread for better performance.
//
// There are two main use cases:
//
// 1) "execute & forget:" you gain faster put/remove operations as you don't have to wait for the transaction to finish.
//
// 2) Many small transactions: if your write load is typically a lot of individual puts that happen in parallel,
// this will merge small transactions into bigger ones. This results in a significant gain in overall throughput.
//
// In situations with (extremely) high async load, an async method may be throttled (~1ms) or delayed up to 1 second.
// In the unlikely event that the object could still not be enqueued (full queue), an error will be returned.
//
// Note that async methods do not give you hard durability guarantees like the synchronous Box provides.
// There is a small time window in which the data may not have been committed durably yet.
type JobAsyncBox struct {
	*objectbox.AsyncBox
}

// AsyncBoxForJob creates a new async box with the given operation timeout in case an async queue is full.
// The returned struct must be freed explicitly using the Close() method.
// It's usually preferable to use JobBox::Async() which takes care of resource management and doesn't require closing.
func AsyncBoxForJob(ob *objectbox.ObjectBox, timeoutMs uint64) *JobAsyncBox {
	var async, err = objectbox.NewAsyncBox(ob, 16, timeoutMs)
	if err != nil {
		panic("Could not create async box for entity ID 16: %s" + err.Error())
	}
	return &JobAsyncBox{AsyncBox: async}
}

// Put inserts/updates a single object asynchronously.
// When inserting a new object, the JobID property on the passed object will be assigned the new ID the entity would hold
// if the insert is ultimately successful. The newly assigned ID may not become valid if the insert fails.
func (asyncBox *JobAsyncBox) Put(object *Job) (uint64, error) {
	return asyncBox.AsyncBox.Put(object)
}

// Insert a single object asynchronously.
// The JobID property on the passed object will be assigned the new ID the entity would hold if the insert is ultimately
// successful. The newly assigned ID may not become valid if the insert fails.
// Fails silently if an object with the same ID already exists (this error is not returned).
func (asyncBox *JobAsyncBox) Insert(object *Job) (id uint64, err error) {
	return asyncBox.AsyncBox.Insert(object)
}

// Update a single object asynchronously.
// The object must already exists or the update fails silently (without an error returned).
func (asyncBox *JobAsyncBox) Update(object *Job) error {
	return asyncBox.AsyncBox.Update(object)
}

// Remove deletes a single object asynchronously.
func (asyncBox *JobAsyncBox) Remove(object *Job) error {
	return asyncBox.AsyncBox.Remove(object)
}

// Query provides a way to search stored objects
//
// For example, you can find all Job which JobID is either 42 or 47:
// 		box.Query(Job_.JobID.In(42, 47)).Find()
type JobQuery struct {
	*objectbox.Query
}

// Find returns all objects matching the query
func (query *JobQuery) Find() ([]*Job, error) {
	objects, err := query.Query.Find()
	if err != nil {
		return nil, err
	}
	return objects.([]*Job), nil
}

// Offset defines the index of the first object to process (how many objects to skip)
func (query *JobQuery) Offset(offset uint64) *JobQuery {
	query.Query.Offset(offset)
	return query
}

// Limit sets the number of elements to process by the query
func (query *JobQuery) Limit(limit uint64) *JobQuery {
	query.Query.Limit(limit)
	return query
}
