// Code generated by ObjectBox; DO NOT EDIT.
// Learn more about defining entities and generating this file - visit https://golang.objectbox.io/entity-annotations

package objectdb

import (
	"encoding/json"
	"errors"
	"github.com/google/flatbuffers/go"
	"github.com/objectbox/objectbox-go/objectbox"
	"github.com/objectbox/objectbox-go/objectbox/fbutils"
)

type job_EntityInfo struct {
	objectbox.Entity
	Uid uint64
}

var JobBinding = job_EntityInfo{
	Entity: objectbox.Entity{
		Id: 16,
	},
	Uid: 5832772456384049602,
}

// Job_ contains type-based Property helpers to facilitate some common operations such as Queries.
var Job_ = struct {
	JobID                        *objectbox.PropertyUint64
	UserID_Name                  *objectbox.PropertyString
	UserID_Id                    *objectbox.PropertyUint64
	CustomVal_Name               *objectbox.PropertyString
	CustomVal_Id                 *objectbox.PropertyUint64
	JobState_Name                *objectbox.PropertyString
	JobState_Id                  *objectbox.PropertyUint64
	WorkspaceID_Name             *objectbox.PropertyString
	WorkspaceID_Id               *objectbox.PropertyUint64
	CreatedAt                    *objectbox.PropertyInt64
	ExpireAt                     *objectbox.PropertyInt64
	EventCount                   *objectbox.PropertyInt
	EventPayload                 *objectbox.PropertyByteVector
	PayloadSize                  *objectbox.PropertyInt64
	ExecTime                     *objectbox.PropertyInt64
	RetryTime                    *objectbox.PropertyInt64
	ErrorResponse                *objectbox.PropertyByteVector
	SourceID_Name                *objectbox.PropertyString
	SourceID_Id                  *objectbox.PropertyUint64
	DestinationID_Name           *objectbox.PropertyString
	DestinationID_Id             *objectbox.PropertyUint64
	SourceBatchID_Name           *objectbox.PropertyString
	SourceBatchID_Id             *objectbox.PropertyUint64
	SourceTaskID_Name            *objectbox.PropertyString
	SourceTaskID_Id              *objectbox.PropertyUint64
	SourceTaskRunID_Name         *objectbox.PropertyString
	SourceTaskRunID_Id           *objectbox.PropertyUint64
	SourceJobID_Name             *objectbox.PropertyString
	SourceJobID_Id               *objectbox.PropertyUint64
	SourceJobRunID_Name          *objectbox.PropertyString
	SourceJobRunID_Id            *objectbox.PropertyUint64
	SourceDefinitionID_Name      *objectbox.PropertyString
	SourceDefinitionID_Id        *objectbox.PropertyUint64
	DestinationDefinitionID_Name *objectbox.PropertyString
	DestinationDefinitionID_Id   *objectbox.PropertyUint64
	SourceCategory_Name          *objectbox.PropertyString
	SourceCategory_Id            *objectbox.PropertyUint64
}{
	JobID: &objectbox.PropertyUint64{
		BaseProperty: &objectbox.BaseProperty{
			Id:     1,
			Entity: &JobBinding.Entity,
		},
	},
	UserID_Name: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id:     2,
			Entity: &JobBinding.Entity,
		},
	},
	UserID_Id: &objectbox.PropertyUint64{
		BaseProperty: &objectbox.BaseProperty{
			Id:     3,
			Entity: &JobBinding.Entity,
		},
	},
	CustomVal_Name: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id:     4,
			Entity: &JobBinding.Entity,
		},
	},
	CustomVal_Id: &objectbox.PropertyUint64{
		BaseProperty: &objectbox.BaseProperty{
			Id:     5,
			Entity: &JobBinding.Entity,
		},
	},
	JobState_Name: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id:     6,
			Entity: &JobBinding.Entity,
		},
	},
	JobState_Id: &objectbox.PropertyUint64{
		BaseProperty: &objectbox.BaseProperty{
			Id:     7,
			Entity: &JobBinding.Entity,
		},
	},
	WorkspaceID_Name: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id:     8,
			Entity: &JobBinding.Entity,
		},
	},
	WorkspaceID_Id: &objectbox.PropertyUint64{
		BaseProperty: &objectbox.BaseProperty{
			Id:     9,
			Entity: &JobBinding.Entity,
		},
	},
	CreatedAt: &objectbox.PropertyInt64{
		BaseProperty: &objectbox.BaseProperty{
			Id:     10,
			Entity: &JobBinding.Entity,
		},
	},
	ExpireAt: &objectbox.PropertyInt64{
		BaseProperty: &objectbox.BaseProperty{
			Id:     11,
			Entity: &JobBinding.Entity,
		},
	},
	EventCount: &objectbox.PropertyInt{
		BaseProperty: &objectbox.BaseProperty{
			Id:     12,
			Entity: &JobBinding.Entity,
		},
	},
	EventPayload: &objectbox.PropertyByteVector{
		BaseProperty: &objectbox.BaseProperty{
			Id:     13,
			Entity: &JobBinding.Entity,
		},
	},
	PayloadSize: &objectbox.PropertyInt64{
		BaseProperty: &objectbox.BaseProperty{
			Id:     14,
			Entity: &JobBinding.Entity,
		},
	},
	ExecTime: &objectbox.PropertyInt64{
		BaseProperty: &objectbox.BaseProperty{
			Id:     15,
			Entity: &JobBinding.Entity,
		},
	},
	RetryTime: &objectbox.PropertyInt64{
		BaseProperty: &objectbox.BaseProperty{
			Id:     16,
			Entity: &JobBinding.Entity,
		},
	},
	ErrorResponse: &objectbox.PropertyByteVector{
		BaseProperty: &objectbox.BaseProperty{
			Id:     17,
			Entity: &JobBinding.Entity,
		},
	},
	SourceID_Name: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id:     18,
			Entity: &JobBinding.Entity,
		},
	},
	SourceID_Id: &objectbox.PropertyUint64{
		BaseProperty: &objectbox.BaseProperty{
			Id:     19,
			Entity: &JobBinding.Entity,
		},
	},
	DestinationID_Name: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id:     20,
			Entity: &JobBinding.Entity,
		},
	},
	DestinationID_Id: &objectbox.PropertyUint64{
		BaseProperty: &objectbox.BaseProperty{
			Id:     21,
			Entity: &JobBinding.Entity,
		},
	},
	SourceBatchID_Name: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id:     22,
			Entity: &JobBinding.Entity,
		},
	},
	SourceBatchID_Id: &objectbox.PropertyUint64{
		BaseProperty: &objectbox.BaseProperty{
			Id:     23,
			Entity: &JobBinding.Entity,
		},
	},
	SourceTaskID_Name: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id:     24,
			Entity: &JobBinding.Entity,
		},
	},
	SourceTaskID_Id: &objectbox.PropertyUint64{
		BaseProperty: &objectbox.BaseProperty{
			Id:     25,
			Entity: &JobBinding.Entity,
		},
	},
	SourceTaskRunID_Name: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id:     26,
			Entity: &JobBinding.Entity,
		},
	},
	SourceTaskRunID_Id: &objectbox.PropertyUint64{
		BaseProperty: &objectbox.BaseProperty{
			Id:     27,
			Entity: &JobBinding.Entity,
		},
	},
	SourceJobID_Name: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id:     28,
			Entity: &JobBinding.Entity,
		},
	},
	SourceJobID_Id: &objectbox.PropertyUint64{
		BaseProperty: &objectbox.BaseProperty{
			Id:     29,
			Entity: &JobBinding.Entity,
		},
	},
	SourceJobRunID_Name: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id:     30,
			Entity: &JobBinding.Entity,
		},
	},
	SourceJobRunID_Id: &objectbox.PropertyUint64{
		BaseProperty: &objectbox.BaseProperty{
			Id:     31,
			Entity: &JobBinding.Entity,
		},
	},
	SourceDefinitionID_Name: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id:     32,
			Entity: &JobBinding.Entity,
		},
	},
	SourceDefinitionID_Id: &objectbox.PropertyUint64{
		BaseProperty: &objectbox.BaseProperty{
			Id:     33,
			Entity: &JobBinding.Entity,
		},
	},
	DestinationDefinitionID_Name: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id:     34,
			Entity: &JobBinding.Entity,
		},
	},
	DestinationDefinitionID_Id: &objectbox.PropertyUint64{
		BaseProperty: &objectbox.BaseProperty{
			Id:     35,
			Entity: &JobBinding.Entity,
		},
	},
	SourceCategory_Name: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id:     36,
			Entity: &JobBinding.Entity,
		},
	},
	SourceCategory_Id: &objectbox.PropertyUint64{
		BaseProperty: &objectbox.BaseProperty{
			Id:     37,
			Entity: &JobBinding.Entity,
		},
	},
}

// GeneratorVersion is called by ObjectBox to verify the compatibility of the generator used to generate this code
func (job_EntityInfo) GeneratorVersion() int {
	return 6
}

// AddToModel is called by ObjectBox during model build
func (job_EntityInfo) AddToModel(model *objectbox.Model) {
	model.Entity("Job", 16, 5832772456384049602)
	model.Property("JobID", 6, 1, 1155090551674869841)
	model.PropertyFlags(1)
	model.Property("UserID_Name", 9, 2, 7099285379978433904)
	model.PropertyFlags(2080)
	model.PropertyIndex(15, 1088552936429905895)
	model.Property("UserID_Id", 6, 3, 710197340335372228)
	model.PropertyFlags(8192)
	model.Property("CustomVal_Name", 9, 4, 4790478674350552580)
	model.PropertyFlags(2080)
	model.PropertyIndex(16, 4778146743233483799)
	model.Property("CustomVal_Id", 6, 5, 5142322196797001815)
	model.PropertyFlags(8192)
	model.Property("JobState_Name", 9, 6, 2014740645906731359)
	model.PropertyFlags(2080)
	model.PropertyIndex(17, 5803846118189756607)
	model.Property("JobState_Id", 6, 7, 8690923483671989547)
	model.PropertyFlags(8192)
	model.Property("WorkspaceID_Name", 9, 8, 7005368517087895505)
	model.PropertyFlags(2080)
	model.PropertyIndex(18, 7856539576289346480)
	model.Property("WorkspaceID_Id", 6, 9, 560330897020134006)
	model.PropertyFlags(8192)
	model.Property("CreatedAt", 10, 10, 7106951967886408155)
	model.Property("ExpireAt", 10, 11, 2662406594162733085)
	model.Property("EventCount", 6, 12, 7907022427670290827)
	model.Property("EventPayload", 23, 13, 3375618731910813363)
	model.Property("PayloadSize", 6, 14, 8595049042699444881)
	model.Property("ExecTime", 10, 15, 2901924393599502444)
	model.Property("RetryTime", 10, 16, 3986349892723070769)
	model.Property("ErrorResponse", 23, 17, 7698557647163241468)
	model.Property("SourceID_Name", 9, 18, 1036413255105589974)
	model.PropertyFlags(2080)
	model.PropertyIndex(19, 8693586707121841945)
	model.Property("SourceID_Id", 6, 19, 4442547919345481303)
	model.PropertyFlags(8192)
	model.Property("DestinationID_Name", 9, 20, 7870494279688839896)
	model.PropertyFlags(2080)
	model.PropertyIndex(20, 2719255913803474029)
	model.Property("DestinationID_Id", 6, 21, 7900396756164807634)
	model.PropertyFlags(8192)
	model.Property("SourceBatchID_Name", 9, 22, 6359132790664622615)
	model.PropertyFlags(2080)
	model.PropertyIndex(21, 762658924468973223)
	model.Property("SourceBatchID_Id", 6, 23, 4068302751621631703)
	model.PropertyFlags(8192)
	model.Property("SourceTaskID_Name", 9, 24, 3457207826898017398)
	model.PropertyFlags(2080)
	model.PropertyIndex(22, 817520939057098261)
	model.Property("SourceTaskID_Id", 6, 25, 2434623127428887024)
	model.PropertyFlags(8192)
	model.Property("SourceTaskRunID_Name", 9, 26, 4868938027604613756)
	model.PropertyFlags(2080)
	model.PropertyIndex(23, 1782014146488391713)
	model.Property("SourceTaskRunID_Id", 6, 27, 2664011058148494637)
	model.PropertyFlags(8192)
	model.Property("SourceJobID_Name", 9, 28, 2933472893315614163)
	model.PropertyFlags(2080)
	model.PropertyIndex(24, 4198834430812501915)
	model.Property("SourceJobID_Id", 6, 29, 630615508811927491)
	model.PropertyFlags(8192)
	model.Property("SourceJobRunID_Name", 9, 30, 978832687571356313)
	model.PropertyFlags(2080)
	model.PropertyIndex(25, 4135416111576494273)
	model.Property("SourceJobRunID_Id", 6, 31, 1171386810879964138)
	model.PropertyFlags(8192)
	model.Property("SourceDefinitionID_Name", 9, 32, 7141420158795663912)
	model.PropertyFlags(2080)
	model.PropertyIndex(26, 7653539556594406310)
	model.Property("SourceDefinitionID_Id", 6, 33, 5468349371132374023)
	model.PropertyFlags(8192)
	model.Property("DestinationDefinitionID_Name", 9, 34, 7423375865888233353)
	model.PropertyFlags(2080)
	model.PropertyIndex(27, 1017625041415179128)
	model.Property("DestinationDefinitionID_Id", 6, 35, 387071259876002936)
	model.PropertyFlags(8192)
	model.Property("SourceCategory_Name", 9, 36, 1078124556180274539)
	model.PropertyFlags(2080)
	model.PropertyIndex(28, 4193512282878406178)
	model.Property("SourceCategory_Id", 6, 37, 5594534062280191769)
	model.PropertyFlags(8192)
	model.EntityLastPropertyId(37, 5594534062280191769)
}

// GetId is called by ObjectBox during Put operations to check for existing ID on an object
func (job_EntityInfo) GetId(object interface{}) (uint64, error) {
	return object.(*Job).JobID, nil
}

// SetId is called by ObjectBox during Put to update an ID on an object that has just been inserted
func (job_EntityInfo) SetId(object interface{}, id uint64) error {
	object.(*Job).JobID = id
	return nil
}

// PutRelated is called by ObjectBox to put related entities before the object itself is flattened and put
func (job_EntityInfo) PutRelated(ob *objectbox.ObjectBox, object interface{}, id uint64) error {
	return nil
}

// Flatten is called by ObjectBox to transform an object to a FlatBuffer
func (job_EntityInfo) Flatten(object interface{}, fbb *flatbuffers.Builder, id uint64) error {
	obj := object.(*Job)
	var propCreatedAt int64
	{
		var err error
		propCreatedAt, err = objectbox.TimeInt64ConvertToDatabaseValue(obj.CreatedAt)
		if err != nil {
			return errors.New("converter objectbox.TimeInt64ConvertToDatabaseValue() failed on Job.CreatedAt: " + err.Error())
		}
	}

	var propExpireAt int64
	{
		var err error
		propExpireAt, err = objectbox.TimeInt64ConvertToDatabaseValue(obj.ExpireAt)
		if err != nil {
			return errors.New("converter objectbox.TimeInt64ConvertToDatabaseValue() failed on Job.ExpireAt: " + err.Error())
		}
	}

	var propExecTime int64
	{
		var err error
		propExecTime, err = objectbox.TimeInt64ConvertToDatabaseValue(obj.ExecTime)
		if err != nil {
			return errors.New("converter objectbox.TimeInt64ConvertToDatabaseValue() failed on Job.ExecTime: " + err.Error())
		}
	}

	var propRetryTime int64
	{
		var err error
		propRetryTime, err = objectbox.TimeInt64ConvertToDatabaseValue(obj.RetryTime)
		if err != nil {
			return errors.New("converter objectbox.TimeInt64ConvertToDatabaseValue() failed on Job.RetryTime: " + err.Error())
		}
	}

	var offsetUserID_Name = fbutils.CreateStringOffset(fbb, obj.UserID.Name)
	var offsetCustomVal_Name = fbutils.CreateStringOffset(fbb, obj.CustomVal.Name)
	var offsetJobState_Name = fbutils.CreateStringOffset(fbb, obj.JobState.Name)
	var offsetWorkspaceID_Name = fbutils.CreateStringOffset(fbb, obj.WorkspaceID.Name)
	var offsetEventPayload = fbutils.CreateByteVectorOffset(fbb, []byte(obj.EventPayload))
	var offsetErrorResponse = fbutils.CreateByteVectorOffset(fbb, []byte(obj.ErrorResponse))
	var offsetSourceID_Name = fbutils.CreateStringOffset(fbb, obj.SourceID.Name)
	var offsetDestinationID_Name = fbutils.CreateStringOffset(fbb, obj.DestinationID.Name)
	var offsetSourceBatchID_Name = fbutils.CreateStringOffset(fbb, obj.SourceBatchID.Name)
	var offsetSourceTaskID_Name = fbutils.CreateStringOffset(fbb, obj.SourceTaskID.Name)
	var offsetSourceTaskRunID_Name = fbutils.CreateStringOffset(fbb, obj.SourceTaskRunID.Name)
	var offsetSourceJobID_Name = fbutils.CreateStringOffset(fbb, obj.SourceJobID.Name)
	var offsetSourceJobRunID_Name = fbutils.CreateStringOffset(fbb, obj.SourceJobRunID.Name)
	var offsetSourceDefinitionID_Name = fbutils.CreateStringOffset(fbb, obj.SourceDefinitionID.Name)
	var offsetDestinationDefinitionID_Name = fbutils.CreateStringOffset(fbb, obj.DestinationDefinitionID.Name)
	var offsetSourceCategory_Name = fbutils.CreateStringOffset(fbb, obj.SourceCategory.Name)

	// build the FlatBuffers object
	fbb.StartObject(37)
	fbutils.SetUint64Slot(fbb, 0, id)
	if obj.UserID != nil {
		fbutils.SetUOffsetTSlot(fbb, 1, offsetUserID_Name)
		fbutils.SetUint64Slot(fbb, 2, obj.UserID.Id)
	}
	if obj.CustomVal != nil {
		fbutils.SetUOffsetTSlot(fbb, 3, offsetCustomVal_Name)
		fbutils.SetUint64Slot(fbb, 4, obj.CustomVal.Id)
	}
	if obj.JobState != nil {
		fbutils.SetUOffsetTSlot(fbb, 5, offsetJobState_Name)
		fbutils.SetUint64Slot(fbb, 6, obj.JobState.Id)
	}
	if obj.WorkspaceID != nil {
		fbutils.SetUOffsetTSlot(fbb, 7, offsetWorkspaceID_Name)
		fbutils.SetUint64Slot(fbb, 8, obj.WorkspaceID.Id)
	}
	fbutils.SetInt64Slot(fbb, 9, propCreatedAt)
	fbutils.SetInt64Slot(fbb, 10, propExpireAt)
	fbutils.SetInt64Slot(fbb, 11, int64(obj.EventCount))
	fbutils.SetUOffsetTSlot(fbb, 12, offsetEventPayload)
	fbutils.SetInt64Slot(fbb, 13, obj.PayloadSize)
	fbutils.SetInt64Slot(fbb, 14, propExecTime)
	fbutils.SetInt64Slot(fbb, 15, propRetryTime)
	fbutils.SetUOffsetTSlot(fbb, 16, offsetErrorResponse)
	if obj.SourceID != nil {
		fbutils.SetUOffsetTSlot(fbb, 17, offsetSourceID_Name)
		fbutils.SetUint64Slot(fbb, 18, obj.SourceID.Id)
	}
	if obj.DestinationID != nil {
		fbutils.SetUOffsetTSlot(fbb, 19, offsetDestinationID_Name)
		fbutils.SetUint64Slot(fbb, 20, obj.DestinationID.Id)
	}
	if obj.SourceBatchID != nil {
		fbutils.SetUOffsetTSlot(fbb, 21, offsetSourceBatchID_Name)
		fbutils.SetUint64Slot(fbb, 22, obj.SourceBatchID.Id)
	}
	if obj.SourceTaskID != nil {
		fbutils.SetUOffsetTSlot(fbb, 23, offsetSourceTaskID_Name)
		fbutils.SetUint64Slot(fbb, 24, obj.SourceTaskID.Id)
	}
	if obj.SourceTaskRunID != nil {
		fbutils.SetUOffsetTSlot(fbb, 25, offsetSourceTaskRunID_Name)
		fbutils.SetUint64Slot(fbb, 26, obj.SourceTaskRunID.Id)
	}
	if obj.SourceJobID != nil {
		fbutils.SetUOffsetTSlot(fbb, 27, offsetSourceJobID_Name)
		fbutils.SetUint64Slot(fbb, 28, obj.SourceJobID.Id)
	}
	if obj.SourceJobRunID != nil {
		fbutils.SetUOffsetTSlot(fbb, 29, offsetSourceJobRunID_Name)
		fbutils.SetUint64Slot(fbb, 30, obj.SourceJobRunID.Id)
	}
	if obj.SourceDefinitionID != nil {
		fbutils.SetUOffsetTSlot(fbb, 31, offsetSourceDefinitionID_Name)
		fbutils.SetUint64Slot(fbb, 32, obj.SourceDefinitionID.Id)
	}
	if obj.DestinationDefinitionID != nil {
		fbutils.SetUOffsetTSlot(fbb, 33, offsetDestinationDefinitionID_Name)
		fbutils.SetUint64Slot(fbb, 34, obj.DestinationDefinitionID.Id)
	}
	if obj.SourceCategory != nil {
		fbutils.SetUOffsetTSlot(fbb, 35, offsetSourceCategory_Name)
		fbutils.SetUint64Slot(fbb, 36, obj.SourceCategory.Id)
	}
	return nil
}

// Load is called by ObjectBox to load an object from a FlatBuffer
func (job_EntityInfo) Load(ob *objectbox.ObjectBox, bytes []byte) (interface{}, error) {
	if len(bytes) == 0 { // sanity check, should "never" happen
		return nil, errors.New("can't deserialize an object of type 'Job' - no data received")
	}

	var table = &flatbuffers.Table{
		Bytes: bytes,
		Pos:   flatbuffers.GetUOffsetT(bytes),
	}

	var propJobID = table.GetUint64Slot(4, 0)

	propCreatedAt, err := objectbox.TimeInt64ConvertToEntityProperty(fbutils.GetInt64Slot(table, 22))
	if err != nil {
		return nil, errors.New("converter objectbox.TimeInt64ConvertToEntityProperty() failed on Job.CreatedAt: " + err.Error())
	}

	propExpireAt, err := objectbox.TimeInt64ConvertToEntityProperty(fbutils.GetInt64Slot(table, 24))
	if err != nil {
		return nil, errors.New("converter objectbox.TimeInt64ConvertToEntityProperty() failed on Job.ExpireAt: " + err.Error())
	}

	propExecTime, err := objectbox.TimeInt64ConvertToEntityProperty(fbutils.GetInt64Slot(table, 32))
	if err != nil {
		return nil, errors.New("converter objectbox.TimeInt64ConvertToEntityProperty() failed on Job.ExecTime: " + err.Error())
	}

	propRetryTime, err := objectbox.TimeInt64ConvertToEntityProperty(fbutils.GetInt64Slot(table, 34))
	if err != nil {
		return nil, errors.New("converter objectbox.TimeInt64ConvertToEntityProperty() failed on Job.RetryTime: " + err.Error())
	}

	return &Job{
		JobID: propJobID,
		UserID: &UserID{
			Name: fbutils.GetStringSlot(table, 6),
			Id:   fbutils.GetUint64Slot(table, 8),
		},
		CustomVal: &CustomVal{
			Name: fbutils.GetStringSlot(table, 10),
			Id:   fbutils.GetUint64Slot(table, 12),
		},
		JobState: &JobState{
			Name: fbutils.GetStringSlot(table, 14),
			Id:   fbutils.GetUint64Slot(table, 16),
		},
		WorkspaceID: &WorkspaceID{
			Name: fbutils.GetStringSlot(table, 18),
			Id:   fbutils.GetUint64Slot(table, 20),
		},
		CreatedAt:     propCreatedAt,
		ExpireAt:      propExpireAt,
		EventCount:    fbutils.GetIntSlot(table, 26),
		EventPayload:  json.RawMessage(fbutils.GetByteVectorSlot(table, 28)),
		PayloadSize:   fbutils.GetInt64Slot(table, 30),
		ExecTime:      propExecTime,
		RetryTime:     propRetryTime,
		ErrorResponse: json.RawMessage(fbutils.GetByteVectorSlot(table, 36)),
		SourceID: &SourceID{
			Name: fbutils.GetStringSlot(table, 38),
			Id:   fbutils.GetUint64Slot(table, 40),
		},
		DestinationID: &DestinationID{
			Name: fbutils.GetStringSlot(table, 42),
			Id:   fbutils.GetUint64Slot(table, 44),
		},
		SourceBatchID: &SourceBatchID{
			Name: fbutils.GetStringSlot(table, 46),
			Id:   fbutils.GetUint64Slot(table, 48),
		},
		SourceTaskID: &SourceTaskID{
			Name: fbutils.GetStringSlot(table, 50),
			Id:   fbutils.GetUint64Slot(table, 52),
		},
		SourceTaskRunID: &SourceTaskRunID{
			Name: fbutils.GetStringSlot(table, 54),
			Id:   fbutils.GetUint64Slot(table, 56),
		},
		SourceJobID: &SourceJobID{
			Name: fbutils.GetStringSlot(table, 58),
			Id:   fbutils.GetUint64Slot(table, 60),
		},
		SourceJobRunID: &SourceJobRunID{
			Name: fbutils.GetStringSlot(table, 62),
			Id:   fbutils.GetUint64Slot(table, 64),
		},
		SourceDefinitionID: &SourceDefinitionID{
			Name: fbutils.GetStringSlot(table, 66),
			Id:   fbutils.GetUint64Slot(table, 68),
		},
		DestinationDefinitionID: &DestinationDefinitionID{
			Name: fbutils.GetStringSlot(table, 70),
			Id:   fbutils.GetUint64Slot(table, 72),
		},
		SourceCategory: &SourceCategory{
			Name: fbutils.GetStringSlot(table, 74),
			Id:   fbutils.GetUint64Slot(table, 76),
		},
	}, nil
}

// MakeSlice is called by ObjectBox to construct a new slice to hold the read objects
func (job_EntityInfo) MakeSlice(capacity int) interface{} {
	return make([]*Job, 0, capacity)
}

// AppendToSlice is called by ObjectBox to fill the slice of the read objects
func (job_EntityInfo) AppendToSlice(slice interface{}, object interface{}) interface{} {
	if object == nil {
		return append(slice.([]*Job), nil)
	}
	return append(slice.([]*Job), object.(*Job))
}

// Box provides CRUD access to Job objects
type JobBox struct {
	*objectbox.Box
}

// BoxForJob opens a box of Job objects
func BoxForJob(ob *objectbox.ObjectBox) *JobBox {
	return &JobBox{
		Box: ob.InternalBox(16),
	}
}

// Put synchronously inserts/updates a single object.
// In case the JobID is not specified, it would be assigned automatically (auto-increment).
// When inserting, the Job.JobID property on the passed object will be assigned the new ID as well.
func (box *JobBox) Put(object *Job) (uint64, error) {
	return box.Box.Put(object)
}

// Insert synchronously inserts a single object. As opposed to Put, Insert will fail if given an ID that already exists.
// In case the JobID is not specified, it would be assigned automatically (auto-increment).
// When inserting, the Job.JobID property on the passed object will be assigned the new ID as well.
func (box *JobBox) Insert(object *Job) (uint64, error) {
	return box.Box.Insert(object)
}

// Update synchronously updates a single object.
// As opposed to Put, Update will fail if an object with the same ID is not found in the database.
func (box *JobBox) Update(object *Job) error {
	return box.Box.Update(object)
}

// PutAsync asynchronously inserts/updates a single object.
// Deprecated: use box.Async().Put() instead
func (box *JobBox) PutAsync(object *Job) (uint64, error) {
	return box.Box.PutAsync(object)
}

// PutMany inserts multiple objects in single transaction.
// In case JobIDs are not set on the objects, they would be assigned automatically (auto-increment).
//
// Returns: IDs of the put objects (in the same order).
// When inserting, the Job.JobID property on the objects in the slice will be assigned the new IDs as well.
//
// Note: In case an error occurs during the transaction, some of the objects may already have the Job.JobID assigned
// even though the transaction has been rolled back and the objects are not stored under those IDs.
//
// Note: The slice may be empty or even nil; in both cases, an empty IDs slice and no error is returned.
func (box *JobBox) PutMany(objects []*Job) ([]uint64, error) {
	return box.Box.PutMany(objects)
}

// Get reads a single object.
//
// Returns nil (and no error) in case the object with the given ID doesn't exist.
func (box *JobBox) Get(id uint64) (*Job, error) {
	object, err := box.Box.Get(id)
	if err != nil {
		return nil, err
	} else if object == nil {
		return nil, nil
	}
	return object.(*Job), nil
}

// GetMany reads multiple objects at once.
// If any of the objects doesn't exist, its position in the return slice is nil
func (box *JobBox) GetMany(ids ...uint64) ([]*Job, error) {
	objects, err := box.Box.GetMany(ids...)
	if err != nil {
		return nil, err
	}
	return objects.([]*Job), nil
}

// GetManyExisting reads multiple objects at once, skipping those that do not exist.
func (box *JobBox) GetManyExisting(ids ...uint64) ([]*Job, error) {
	objects, err := box.Box.GetManyExisting(ids...)
	if err != nil {
		return nil, err
	}
	return objects.([]*Job), nil
}

// GetAll reads all stored objects
func (box *JobBox) GetAll() ([]*Job, error) {
	objects, err := box.Box.GetAll()
	if err != nil {
		return nil, err
	}
	return objects.([]*Job), nil
}

// Remove deletes a single object
func (box *JobBox) Remove(object *Job) error {
	return box.Box.Remove(object)
}

// RemoveMany deletes multiple objects at once.
// Returns the number of deleted object or error on failure.
// Note that this method will not fail if an object is not found (e.g. already removed).
// In case you need to strictly check whether all of the objects exist before removing them,
// you can execute multiple box.Contains() and box.Remove() inside a single write transaction.
func (box *JobBox) RemoveMany(objects ...*Job) (uint64, error) {
	var ids = make([]uint64, len(objects))
	for k, object := range objects {
		ids[k] = object.JobID
	}
	return box.Box.RemoveIds(ids...)
}

// Creates a query with the given conditions. Use the fields of the Job_ struct to create conditions.
// Keep the *JobQuery if you intend to execute the query multiple times.
// Note: this function panics if you try to create illegal queries; e.g. use properties of an alien type.
// This is typically a programming error. Use QueryOrError instead if you want the explicit error check.
func (box *JobBox) Query(conditions ...objectbox.Condition) *JobQuery {
	return &JobQuery{
		box.Box.Query(conditions...),
	}
}

// Creates a query with the given conditions. Use the fields of the Job_ struct to create conditions.
// Keep the *JobQuery if you intend to execute the query multiple times.
func (box *JobBox) QueryOrError(conditions ...objectbox.Condition) (*JobQuery, error) {
	if query, err := box.Box.QueryOrError(conditions...); err != nil {
		return nil, err
	} else {
		return &JobQuery{query}, nil
	}
}

// Async provides access to the default Async Box for asynchronous operations. See JobAsyncBox for more information.
func (box *JobBox) Async() *JobAsyncBox {
	return &JobAsyncBox{AsyncBox: box.Box.Async()}
}

// JobAsyncBox provides asynchronous operations on Job objects.
//
// Asynchronous operations are executed on a separate internal thread for better performance.
//
// There are two main use cases:
//
// 1) "execute & forget:" you gain faster put/remove operations as you don't have to wait for the transaction to finish.
//
// 2) Many small transactions: if your write load is typically a lot of individual puts that happen in parallel,
// this will merge small transactions into bigger ones. This results in a significant gain in overall throughput.
//
// In situations with (extremely) high async load, an async method may be throttled (~1ms) or delayed up to 1 second.
// In the unlikely event that the object could still not be enqueued (full queue), an error will be returned.
//
// Note that async methods do not give you hard durability guarantees like the synchronous Box provides.
// There is a small time window in which the data may not have been committed durably yet.
type JobAsyncBox struct {
	*objectbox.AsyncBox
}

// AsyncBoxForJob creates a new async box with the given operation timeout in case an async queue is full.
// The returned struct must be freed explicitly using the Close() method.
// It's usually preferable to use JobBox::Async() which takes care of resource management and doesn't require closing.
func AsyncBoxForJob(ob *objectbox.ObjectBox, timeoutMs uint64) *JobAsyncBox {
	var async, err = objectbox.NewAsyncBox(ob, 16, timeoutMs)
	if err != nil {
		panic("Could not create async box for entity ID 16: %s" + err.Error())
	}
	return &JobAsyncBox{AsyncBox: async}
}

// Put inserts/updates a single object asynchronously.
// When inserting a new object, the JobID property on the passed object will be assigned the new ID the entity would hold
// if the insert is ultimately successful. The newly assigned ID may not become valid if the insert fails.
func (asyncBox *JobAsyncBox) Put(object *Job) (uint64, error) {
	return asyncBox.AsyncBox.Put(object)
}

// Insert a single object asynchronously.
// The JobID property on the passed object will be assigned the new ID the entity would hold if the insert is ultimately
// successful. The newly assigned ID may not become valid if the insert fails.
// Fails silently if an object with the same ID already exists (this error is not returned).
func (asyncBox *JobAsyncBox) Insert(object *Job) (id uint64, err error) {
	return asyncBox.AsyncBox.Insert(object)
}

// Update a single object asynchronously.
// The object must already exists or the update fails silently (without an error returned).
func (asyncBox *JobAsyncBox) Update(object *Job) error {
	return asyncBox.AsyncBox.Update(object)
}

// Remove deletes a single object asynchronously.
func (asyncBox *JobAsyncBox) Remove(object *Job) error {
	return asyncBox.AsyncBox.Remove(object)
}

// Query provides a way to search stored objects
//
// For example, you can find all Job which JobID is either 42 or 47:
// 		box.Query(Job_.JobID.In(42, 47)).Find()
type JobQuery struct {
	*objectbox.Query
}

// Find returns all objects matching the query
func (query *JobQuery) Find() ([]*Job, error) {
	objects, err := query.Query.Find()
	if err != nil {
		return nil, err
	}
	return objects.([]*Job), nil
}

// Offset defines the index of the first object to process (how many objects to skip)
func (query *JobQuery) Offset(offset uint64) *JobQuery {
	query.Query.Offset(offset)
	return query
}

// Limit sets the number of elements to process by the query
func (query *JobQuery) Limit(limit uint64) *JobQuery {
	query.Query.Limit(limit)
	return query
}
