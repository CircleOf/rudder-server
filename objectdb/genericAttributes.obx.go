// Code generated by ObjectBox; DO NOT EDIT.
// Learn more about defining entities and generating this file - visit https://golang.objectbox.io/entity-annotations

package objectdb

import (
	"errors"
	"github.com/google/flatbuffers/go"
	"github.com/objectbox/objectbox-go/objectbox"
	"github.com/objectbox/objectbox-go/objectbox/fbutils"
)

type userID_EntityInfo struct {
	objectbox.Entity
	Uid uint64
}

var UserIDBinding = userID_EntityInfo{
	Entity: objectbox.Entity{
		Id: 12,
	},
	Uid: 6985865343804806110,
}

// UserID_ contains type-based Property helpers to facilitate some common operations such as Queries.
var UserID_ = struct {
	Name             *objectbox.PropertyString
	Id               *objectbox.PropertyUint64
	WorkspaceID_Name *objectbox.PropertyString
	WorkspaceID_Id   *objectbox.PropertyUint64
}{
	Name: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id:     1,
			Entity: &UserIDBinding.Entity,
		},
	},
	Id: &objectbox.PropertyUint64{
		BaseProperty: &objectbox.BaseProperty{
			Id:     2,
			Entity: &UserIDBinding.Entity,
		},
	},
	WorkspaceID_Name: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id:     3,
			Entity: &UserIDBinding.Entity,
		},
	},
	WorkspaceID_Id: &objectbox.PropertyUint64{
		BaseProperty: &objectbox.BaseProperty{
			Id:     4,
			Entity: &UserIDBinding.Entity,
		},
	},
}

// GeneratorVersion is called by ObjectBox to verify the compatibility of the generator used to generate this code
func (userID_EntityInfo) GeneratorVersion() int {
	return 6
}

// AddToModel is called by ObjectBox during model build
func (userID_EntityInfo) AddToModel(model *objectbox.Model) {
	model.Entity("UserID", 12, 6985865343804806110)
	model.Property("Name", 9, 1, 7460596151078387211)
	model.PropertyFlags(2080)
	model.PropertyIndex(15, 5073285257420525878)
	model.Property("Id", 6, 2, 5138211716228716342)
	model.PropertyFlags(1)
	model.Property("WorkspaceID_Name", 9, 3, 2260303511095608590)
	model.PropertyFlags(2080)
	model.PropertyIndex(16, 1513898322936036820)
	model.Property("WorkspaceID_Id", 6, 4, 8364717455378417564)
	model.PropertyFlags(8192)
	model.EntityLastPropertyId(4, 8364717455378417564)
}

// GetId is called by ObjectBox during Put operations to check for existing ID on an object
func (userID_EntityInfo) GetId(object interface{}) (uint64, error) {
	return object.(*UserID).Id, nil
}

// SetId is called by ObjectBox during Put to update an ID on an object that has just been inserted
func (userID_EntityInfo) SetId(object interface{}, id uint64) error {
	object.(*UserID).Id = id
	return nil
}

// PutRelated is called by ObjectBox to put related entities before the object itself is flattened and put
func (userID_EntityInfo) PutRelated(ob *objectbox.ObjectBox, object interface{}, id uint64) error {
	return nil
}

// Flatten is called by ObjectBox to transform an object to a FlatBuffer
func (userID_EntityInfo) Flatten(object interface{}, fbb *flatbuffers.Builder, id uint64) error {
	obj := object.(*UserID)
	var offsetName = fbutils.CreateStringOffset(fbb, obj.Name)
	var offsetWorkspaceID_Name = fbutils.CreateStringOffset(fbb, obj.WorkspaceID.Name)

	// build the FlatBuffers object
	fbb.StartObject(4)
	fbutils.SetUOffsetTSlot(fbb, 0, offsetName)
	fbutils.SetUint64Slot(fbb, 1, id)
	if obj.WorkspaceID != nil {
		fbutils.SetUOffsetTSlot(fbb, 2, offsetWorkspaceID_Name)
		fbutils.SetUint64Slot(fbb, 3, obj.WorkspaceID.Id)
	}
	return nil
}

// Load is called by ObjectBox to load an object from a FlatBuffer
func (userID_EntityInfo) Load(ob *objectbox.ObjectBox, bytes []byte) (interface{}, error) {
	if len(bytes) == 0 { // sanity check, should "never" happen
		return nil, errors.New("can't deserialize an object of type 'UserID' - no data received")
	}

	var table = &flatbuffers.Table{
		Bytes: bytes,
		Pos:   flatbuffers.GetUOffsetT(bytes),
	}

	var propId = table.GetUint64Slot(6, 0)

	return &UserID{
		Name: fbutils.GetStringSlot(table, 4),
		Id:   propId,
		WorkspaceID: &WorkspaceID{
			Name: fbutils.GetStringSlot(table, 8),
			Id:   fbutils.GetUint64Slot(table, 10),
		},
	}, nil
}

// MakeSlice is called by ObjectBox to construct a new slice to hold the read objects
func (userID_EntityInfo) MakeSlice(capacity int) interface{} {
	return make([]*UserID, 0, capacity)
}

// AppendToSlice is called by ObjectBox to fill the slice of the read objects
func (userID_EntityInfo) AppendToSlice(slice interface{}, object interface{}) interface{} {
	if object == nil {
		return append(slice.([]*UserID), nil)
	}
	return append(slice.([]*UserID), object.(*UserID))
}

// Box provides CRUD access to UserID objects
type UserIDBox struct {
	*objectbox.Box
}

// BoxForUserID opens a box of UserID objects
func BoxForUserID(ob *objectbox.ObjectBox) *UserIDBox {
	return &UserIDBox{
		Box: ob.InternalBox(12),
	}
}

// Put synchronously inserts/updates a single object.
// In case the Id is not specified, it would be assigned automatically (auto-increment).
// When inserting, the UserID.Id property on the passed object will be assigned the new ID as well.
func (box *UserIDBox) Put(object *UserID) (uint64, error) {
	return box.Box.Put(object)
}

// Insert synchronously inserts a single object. As opposed to Put, Insert will fail if given an ID that already exists.
// In case the Id is not specified, it would be assigned automatically (auto-increment).
// When inserting, the UserID.Id property on the passed object will be assigned the new ID as well.
func (box *UserIDBox) Insert(object *UserID) (uint64, error) {
	return box.Box.Insert(object)
}

// Update synchronously updates a single object.
// As opposed to Put, Update will fail if an object with the same ID is not found in the database.
func (box *UserIDBox) Update(object *UserID) error {
	return box.Box.Update(object)
}

// PutAsync asynchronously inserts/updates a single object.
// Deprecated: use box.Async().Put() instead
func (box *UserIDBox) PutAsync(object *UserID) (uint64, error) {
	return box.Box.PutAsync(object)
}

// PutMany inserts multiple objects in single transaction.
// In case Ids are not set on the objects, they would be assigned automatically (auto-increment).
//
// Returns: IDs of the put objects (in the same order).
// When inserting, the UserID.Id property on the objects in the slice will be assigned the new IDs as well.
//
// Note: In case an error occurs during the transaction, some of the objects may already have the UserID.Id assigned
// even though the transaction has been rolled back and the objects are not stored under those IDs.
//
// Note: The slice may be empty or even nil; in both cases, an empty IDs slice and no error is returned.
func (box *UserIDBox) PutMany(objects []*UserID) ([]uint64, error) {
	return box.Box.PutMany(objects)
}

// Get reads a single object.
//
// Returns nil (and no error) in case the object with the given ID doesn't exist.
func (box *UserIDBox) Get(id uint64) (*UserID, error) {
	object, err := box.Box.Get(id)
	if err != nil {
		return nil, err
	} else if object == nil {
		return nil, nil
	}
	return object.(*UserID), nil
}

// GetMany reads multiple objects at once.
// If any of the objects doesn't exist, its position in the return slice is nil
func (box *UserIDBox) GetMany(ids ...uint64) ([]*UserID, error) {
	objects, err := box.Box.GetMany(ids...)
	if err != nil {
		return nil, err
	}
	return objects.([]*UserID), nil
}

// GetManyExisting reads multiple objects at once, skipping those that do not exist.
func (box *UserIDBox) GetManyExisting(ids ...uint64) ([]*UserID, error) {
	objects, err := box.Box.GetManyExisting(ids...)
	if err != nil {
		return nil, err
	}
	return objects.([]*UserID), nil
}

// GetAll reads all stored objects
func (box *UserIDBox) GetAll() ([]*UserID, error) {
	objects, err := box.Box.GetAll()
	if err != nil {
		return nil, err
	}
	return objects.([]*UserID), nil
}

// Remove deletes a single object
func (box *UserIDBox) Remove(object *UserID) error {
	return box.Box.Remove(object)
}

// RemoveMany deletes multiple objects at once.
// Returns the number of deleted object or error on failure.
// Note that this method will not fail if an object is not found (e.g. already removed).
// In case you need to strictly check whether all of the objects exist before removing them,
// you can execute multiple box.Contains() and box.Remove() inside a single write transaction.
func (box *UserIDBox) RemoveMany(objects ...*UserID) (uint64, error) {
	var ids = make([]uint64, len(objects))
	for k, object := range objects {
		ids[k] = object.Id
	}
	return box.Box.RemoveIds(ids...)
}

// Creates a query with the given conditions. Use the fields of the UserID_ struct to create conditions.
// Keep the *UserIDQuery if you intend to execute the query multiple times.
// Note: this function panics if you try to create illegal queries; e.g. use properties of an alien type.
// This is typically a programming error. Use QueryOrError instead if you want the explicit error check.
func (box *UserIDBox) Query(conditions ...objectbox.Condition) *UserIDQuery {
	return &UserIDQuery{
		box.Box.Query(conditions...),
	}
}

// Creates a query with the given conditions. Use the fields of the UserID_ struct to create conditions.
// Keep the *UserIDQuery if you intend to execute the query multiple times.
func (box *UserIDBox) QueryOrError(conditions ...objectbox.Condition) (*UserIDQuery, error) {
	if query, err := box.Box.QueryOrError(conditions...); err != nil {
		return nil, err
	} else {
		return &UserIDQuery{query}, nil
	}
}

// Async provides access to the default Async Box for asynchronous operations. See UserIDAsyncBox for more information.
func (box *UserIDBox) Async() *UserIDAsyncBox {
	return &UserIDAsyncBox{AsyncBox: box.Box.Async()}
}

// UserIDAsyncBox provides asynchronous operations on UserID objects.
//
// Asynchronous operations are executed on a separate internal thread for better performance.
//
// There are two main use cases:
//
// 1) "execute & forget:" you gain faster put/remove operations as you don't have to wait for the transaction to finish.
//
// 2) Many small transactions: if your write load is typically a lot of individual puts that happen in parallel,
// this will merge small transactions into bigger ones. This results in a significant gain in overall throughput.
//
// In situations with (extremely) high async load, an async method may be throttled (~1ms) or delayed up to 1 second.
// In the unlikely event that the object could still not be enqueued (full queue), an error will be returned.
//
// Note that async methods do not give you hard durability guarantees like the synchronous Box provides.
// There is a small time window in which the data may not have been committed durably yet.
type UserIDAsyncBox struct {
	*objectbox.AsyncBox
}

// AsyncBoxForUserID creates a new async box with the given operation timeout in case an async queue is full.
// The returned struct must be freed explicitly using the Close() method.
// It's usually preferable to use UserIDBox::Async() which takes care of resource management and doesn't require closing.
func AsyncBoxForUserID(ob *objectbox.ObjectBox, timeoutMs uint64) *UserIDAsyncBox {
	var async, err = objectbox.NewAsyncBox(ob, 12, timeoutMs)
	if err != nil {
		panic("Could not create async box for entity ID 12: %s" + err.Error())
	}
	return &UserIDAsyncBox{AsyncBox: async}
}

// Put inserts/updates a single object asynchronously.
// When inserting a new object, the Id property on the passed object will be assigned the new ID the entity would hold
// if the insert is ultimately successful. The newly assigned ID may not become valid if the insert fails.
func (asyncBox *UserIDAsyncBox) Put(object *UserID) (uint64, error) {
	return asyncBox.AsyncBox.Put(object)
}

// Insert a single object asynchronously.
// The Id property on the passed object will be assigned the new ID the entity would hold if the insert is ultimately
// successful. The newly assigned ID may not become valid if the insert fails.
// Fails silently if an object with the same ID already exists (this error is not returned).
func (asyncBox *UserIDAsyncBox) Insert(object *UserID) (id uint64, err error) {
	return asyncBox.AsyncBox.Insert(object)
}

// Update a single object asynchronously.
// The object must already exists or the update fails silently (without an error returned).
func (asyncBox *UserIDAsyncBox) Update(object *UserID) error {
	return asyncBox.AsyncBox.Update(object)
}

// Remove deletes a single object asynchronously.
func (asyncBox *UserIDAsyncBox) Remove(object *UserID) error {
	return asyncBox.AsyncBox.Remove(object)
}

// Query provides a way to search stored objects
//
// For example, you can find all UserID which Id is either 42 or 47:
// 		box.Query(UserID_.Id.In(42, 47)).Find()
type UserIDQuery struct {
	*objectbox.Query
}

// Find returns all objects matching the query
func (query *UserIDQuery) Find() ([]*UserID, error) {
	objects, err := query.Query.Find()
	if err != nil {
		return nil, err
	}
	return objects.([]*UserID), nil
}

// Offset defines the index of the first object to process (how many objects to skip)
func (query *UserIDQuery) Offset(offset uint64) *UserIDQuery {
	query.Query.Offset(offset)
	return query
}

// Limit sets the number of elements to process by the query
func (query *UserIDQuery) Limit(limit uint64) *UserIDQuery {
	query.Query.Limit(limit)
	return query
}

type customVal_EntityInfo struct {
	objectbox.Entity
	Uid uint64
}

var CustomValBinding = customVal_EntityInfo{
	Entity: objectbox.Entity{
		Id: 13,
	},
	Uid: 7374001581872741036,
}

// CustomVal_ contains type-based Property helpers to facilitate some common operations such as Queries.
var CustomVal_ = struct {
	Name *objectbox.PropertyString
	Id   *objectbox.PropertyUint64
}{
	Name: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id:     1,
			Entity: &CustomValBinding.Entity,
		},
	},
	Id: &objectbox.PropertyUint64{
		BaseProperty: &objectbox.BaseProperty{
			Id:     2,
			Entity: &CustomValBinding.Entity,
		},
	},
}

// GeneratorVersion is called by ObjectBox to verify the compatibility of the generator used to generate this code
func (customVal_EntityInfo) GeneratorVersion() int {
	return 6
}

// AddToModel is called by ObjectBox during model build
func (customVal_EntityInfo) AddToModel(model *objectbox.Model) {
	model.Entity("CustomVal", 13, 7374001581872741036)
	model.Property("Name", 9, 1, 5589074994375652697)
	model.PropertyFlags(2080)
	model.PropertyIndex(17, 8787050160095443341)
	model.Property("Id", 6, 2, 1189637173637526600)
	model.PropertyFlags(1)
	model.EntityLastPropertyId(2, 1189637173637526600)
}

// GetId is called by ObjectBox during Put operations to check for existing ID on an object
func (customVal_EntityInfo) GetId(object interface{}) (uint64, error) {
	return object.(*CustomVal).Id, nil
}

// SetId is called by ObjectBox during Put to update an ID on an object that has just been inserted
func (customVal_EntityInfo) SetId(object interface{}, id uint64) error {
	object.(*CustomVal).Id = id
	return nil
}

// PutRelated is called by ObjectBox to put related entities before the object itself is flattened and put
func (customVal_EntityInfo) PutRelated(ob *objectbox.ObjectBox, object interface{}, id uint64) error {
	return nil
}

// Flatten is called by ObjectBox to transform an object to a FlatBuffer
func (customVal_EntityInfo) Flatten(object interface{}, fbb *flatbuffers.Builder, id uint64) error {
	obj := object.(*CustomVal)
	var offsetName = fbutils.CreateStringOffset(fbb, obj.Name)

	// build the FlatBuffers object
	fbb.StartObject(2)
	fbutils.SetUOffsetTSlot(fbb, 0, offsetName)
	fbutils.SetUint64Slot(fbb, 1, id)
	return nil
}

// Load is called by ObjectBox to load an object from a FlatBuffer
func (customVal_EntityInfo) Load(ob *objectbox.ObjectBox, bytes []byte) (interface{}, error) {
	if len(bytes) == 0 { // sanity check, should "never" happen
		return nil, errors.New("can't deserialize an object of type 'CustomVal' - no data received")
	}

	var table = &flatbuffers.Table{
		Bytes: bytes,
		Pos:   flatbuffers.GetUOffsetT(bytes),
	}

	var propId = table.GetUint64Slot(6, 0)

	return &CustomVal{
		Name: fbutils.GetStringSlot(table, 4),
		Id:   propId,
	}, nil
}

// MakeSlice is called by ObjectBox to construct a new slice to hold the read objects
func (customVal_EntityInfo) MakeSlice(capacity int) interface{} {
	return make([]*CustomVal, 0, capacity)
}

// AppendToSlice is called by ObjectBox to fill the slice of the read objects
func (customVal_EntityInfo) AppendToSlice(slice interface{}, object interface{}) interface{} {
	if object == nil {
		return append(slice.([]*CustomVal), nil)
	}
	return append(slice.([]*CustomVal), object.(*CustomVal))
}

// Box provides CRUD access to CustomVal objects
type CustomValBox struct {
	*objectbox.Box
}

// BoxForCustomVal opens a box of CustomVal objects
func BoxForCustomVal(ob *objectbox.ObjectBox) *CustomValBox {
	return &CustomValBox{
		Box: ob.InternalBox(13),
	}
}

// Put synchronously inserts/updates a single object.
// In case the Id is not specified, it would be assigned automatically (auto-increment).
// When inserting, the CustomVal.Id property on the passed object will be assigned the new ID as well.
func (box *CustomValBox) Put(object *CustomVal) (uint64, error) {
	return box.Box.Put(object)
}

// Insert synchronously inserts a single object. As opposed to Put, Insert will fail if given an ID that already exists.
// In case the Id is not specified, it would be assigned automatically (auto-increment).
// When inserting, the CustomVal.Id property on the passed object will be assigned the new ID as well.
func (box *CustomValBox) Insert(object *CustomVal) (uint64, error) {
	return box.Box.Insert(object)
}

// Update synchronously updates a single object.
// As opposed to Put, Update will fail if an object with the same ID is not found in the database.
func (box *CustomValBox) Update(object *CustomVal) error {
	return box.Box.Update(object)
}

// PutAsync asynchronously inserts/updates a single object.
// Deprecated: use box.Async().Put() instead
func (box *CustomValBox) PutAsync(object *CustomVal) (uint64, error) {
	return box.Box.PutAsync(object)
}

// PutMany inserts multiple objects in single transaction.
// In case Ids are not set on the objects, they would be assigned automatically (auto-increment).
//
// Returns: IDs of the put objects (in the same order).
// When inserting, the CustomVal.Id property on the objects in the slice will be assigned the new IDs as well.
//
// Note: In case an error occurs during the transaction, some of the objects may already have the CustomVal.Id assigned
// even though the transaction has been rolled back and the objects are not stored under those IDs.
//
// Note: The slice may be empty or even nil; in both cases, an empty IDs slice and no error is returned.
func (box *CustomValBox) PutMany(objects []*CustomVal) ([]uint64, error) {
	return box.Box.PutMany(objects)
}

// Get reads a single object.
//
// Returns nil (and no error) in case the object with the given ID doesn't exist.
func (box *CustomValBox) Get(id uint64) (*CustomVal, error) {
	object, err := box.Box.Get(id)
	if err != nil {
		return nil, err
	} else if object == nil {
		return nil, nil
	}
	return object.(*CustomVal), nil
}

// GetMany reads multiple objects at once.
// If any of the objects doesn't exist, its position in the return slice is nil
func (box *CustomValBox) GetMany(ids ...uint64) ([]*CustomVal, error) {
	objects, err := box.Box.GetMany(ids...)
	if err != nil {
		return nil, err
	}
	return objects.([]*CustomVal), nil
}

// GetManyExisting reads multiple objects at once, skipping those that do not exist.
func (box *CustomValBox) GetManyExisting(ids ...uint64) ([]*CustomVal, error) {
	objects, err := box.Box.GetManyExisting(ids...)
	if err != nil {
		return nil, err
	}
	return objects.([]*CustomVal), nil
}

// GetAll reads all stored objects
func (box *CustomValBox) GetAll() ([]*CustomVal, error) {
	objects, err := box.Box.GetAll()
	if err != nil {
		return nil, err
	}
	return objects.([]*CustomVal), nil
}

// Remove deletes a single object
func (box *CustomValBox) Remove(object *CustomVal) error {
	return box.Box.Remove(object)
}

// RemoveMany deletes multiple objects at once.
// Returns the number of deleted object or error on failure.
// Note that this method will not fail if an object is not found (e.g. already removed).
// In case you need to strictly check whether all of the objects exist before removing them,
// you can execute multiple box.Contains() and box.Remove() inside a single write transaction.
func (box *CustomValBox) RemoveMany(objects ...*CustomVal) (uint64, error) {
	var ids = make([]uint64, len(objects))
	for k, object := range objects {
		ids[k] = object.Id
	}
	return box.Box.RemoveIds(ids...)
}

// Creates a query with the given conditions. Use the fields of the CustomVal_ struct to create conditions.
// Keep the *CustomValQuery if you intend to execute the query multiple times.
// Note: this function panics if you try to create illegal queries; e.g. use properties of an alien type.
// This is typically a programming error. Use QueryOrError instead if you want the explicit error check.
func (box *CustomValBox) Query(conditions ...objectbox.Condition) *CustomValQuery {
	return &CustomValQuery{
		box.Box.Query(conditions...),
	}
}

// Creates a query with the given conditions. Use the fields of the CustomVal_ struct to create conditions.
// Keep the *CustomValQuery if you intend to execute the query multiple times.
func (box *CustomValBox) QueryOrError(conditions ...objectbox.Condition) (*CustomValQuery, error) {
	if query, err := box.Box.QueryOrError(conditions...); err != nil {
		return nil, err
	} else {
		return &CustomValQuery{query}, nil
	}
}

// Async provides access to the default Async Box for asynchronous operations. See CustomValAsyncBox for more information.
func (box *CustomValBox) Async() *CustomValAsyncBox {
	return &CustomValAsyncBox{AsyncBox: box.Box.Async()}
}

// CustomValAsyncBox provides asynchronous operations on CustomVal objects.
//
// Asynchronous operations are executed on a separate internal thread for better performance.
//
// There are two main use cases:
//
// 1) "execute & forget:" you gain faster put/remove operations as you don't have to wait for the transaction to finish.
//
// 2) Many small transactions: if your write load is typically a lot of individual puts that happen in parallel,
// this will merge small transactions into bigger ones. This results in a significant gain in overall throughput.
//
// In situations with (extremely) high async load, an async method may be throttled (~1ms) or delayed up to 1 second.
// In the unlikely event that the object could still not be enqueued (full queue), an error will be returned.
//
// Note that async methods do not give you hard durability guarantees like the synchronous Box provides.
// There is a small time window in which the data may not have been committed durably yet.
type CustomValAsyncBox struct {
	*objectbox.AsyncBox
}

// AsyncBoxForCustomVal creates a new async box with the given operation timeout in case an async queue is full.
// The returned struct must be freed explicitly using the Close() method.
// It's usually preferable to use CustomValBox::Async() which takes care of resource management and doesn't require closing.
func AsyncBoxForCustomVal(ob *objectbox.ObjectBox, timeoutMs uint64) *CustomValAsyncBox {
	var async, err = objectbox.NewAsyncBox(ob, 13, timeoutMs)
	if err != nil {
		panic("Could not create async box for entity ID 13: %s" + err.Error())
	}
	return &CustomValAsyncBox{AsyncBox: async}
}

// Put inserts/updates a single object asynchronously.
// When inserting a new object, the Id property on the passed object will be assigned the new ID the entity would hold
// if the insert is ultimately successful. The newly assigned ID may not become valid if the insert fails.
func (asyncBox *CustomValAsyncBox) Put(object *CustomVal) (uint64, error) {
	return asyncBox.AsyncBox.Put(object)
}

// Insert a single object asynchronously.
// The Id property on the passed object will be assigned the new ID the entity would hold if the insert is ultimately
// successful. The newly assigned ID may not become valid if the insert fails.
// Fails silently if an object with the same ID already exists (this error is not returned).
func (asyncBox *CustomValAsyncBox) Insert(object *CustomVal) (id uint64, err error) {
	return asyncBox.AsyncBox.Insert(object)
}

// Update a single object asynchronously.
// The object must already exists or the update fails silently (without an error returned).
func (asyncBox *CustomValAsyncBox) Update(object *CustomVal) error {
	return asyncBox.AsyncBox.Update(object)
}

// Remove deletes a single object asynchronously.
func (asyncBox *CustomValAsyncBox) Remove(object *CustomVal) error {
	return asyncBox.AsyncBox.Remove(object)
}

// Query provides a way to search stored objects
//
// For example, you can find all CustomVal which Id is either 42 or 47:
// 		box.Query(CustomVal_.Id.In(42, 47)).Find()
type CustomValQuery struct {
	*objectbox.Query
}

// Find returns all objects matching the query
func (query *CustomValQuery) Find() ([]*CustomVal, error) {
	objects, err := query.Query.Find()
	if err != nil {
		return nil, err
	}
	return objects.([]*CustomVal), nil
}

// Offset defines the index of the first object to process (how many objects to skip)
func (query *CustomValQuery) Offset(offset uint64) *CustomValQuery {
	query.Query.Offset(offset)
	return query
}

// Limit sets the number of elements to process by the query
func (query *CustomValQuery) Limit(limit uint64) *CustomValQuery {
	query.Query.Limit(limit)
	return query
}

type jobState_EntityInfo struct {
	objectbox.Entity
	Uid uint64
}

var JobStateBinding = jobState_EntityInfo{
	Entity: objectbox.Entity{
		Id: 14,
	},
	Uid: 7817480601305742415,
}

// JobState_ contains type-based Property helpers to facilitate some common operations such as Queries.
var JobState_ = struct {
	Name *objectbox.PropertyString
	Id   *objectbox.PropertyUint64
}{
	Name: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id:     1,
			Entity: &JobStateBinding.Entity,
		},
	},
	Id: &objectbox.PropertyUint64{
		BaseProperty: &objectbox.BaseProperty{
			Id:     2,
			Entity: &JobStateBinding.Entity,
		},
	},
}

// GeneratorVersion is called by ObjectBox to verify the compatibility of the generator used to generate this code
func (jobState_EntityInfo) GeneratorVersion() int {
	return 6
}

// AddToModel is called by ObjectBox during model build
func (jobState_EntityInfo) AddToModel(model *objectbox.Model) {
	model.Entity("JobState", 14, 7817480601305742415)
	model.Property("Name", 9, 1, 5294669386065485071)
	model.PropertyFlags(2080)
	model.PropertyIndex(18, 8548597026760530014)
	model.Property("Id", 6, 2, 6595558969534672331)
	model.PropertyFlags(1)
	model.EntityLastPropertyId(2, 6595558969534672331)
}

// GetId is called by ObjectBox during Put operations to check for existing ID on an object
func (jobState_EntityInfo) GetId(object interface{}) (uint64, error) {
	return object.(*JobState).Id, nil
}

// SetId is called by ObjectBox during Put to update an ID on an object that has just been inserted
func (jobState_EntityInfo) SetId(object interface{}, id uint64) error {
	object.(*JobState).Id = id
	return nil
}

// PutRelated is called by ObjectBox to put related entities before the object itself is flattened and put
func (jobState_EntityInfo) PutRelated(ob *objectbox.ObjectBox, object interface{}, id uint64) error {
	return nil
}

// Flatten is called by ObjectBox to transform an object to a FlatBuffer
func (jobState_EntityInfo) Flatten(object interface{}, fbb *flatbuffers.Builder, id uint64) error {
	obj := object.(*JobState)
	var offsetName = fbutils.CreateStringOffset(fbb, obj.Name)

	// build the FlatBuffers object
	fbb.StartObject(2)
	fbutils.SetUOffsetTSlot(fbb, 0, offsetName)
	fbutils.SetUint64Slot(fbb, 1, id)
	return nil
}

// Load is called by ObjectBox to load an object from a FlatBuffer
func (jobState_EntityInfo) Load(ob *objectbox.ObjectBox, bytes []byte) (interface{}, error) {
	if len(bytes) == 0 { // sanity check, should "never" happen
		return nil, errors.New("can't deserialize an object of type 'JobState' - no data received")
	}

	var table = &flatbuffers.Table{
		Bytes: bytes,
		Pos:   flatbuffers.GetUOffsetT(bytes),
	}

	var propId = table.GetUint64Slot(6, 0)

	return &JobState{
		Name: fbutils.GetStringSlot(table, 4),
		Id:   propId,
	}, nil
}

// MakeSlice is called by ObjectBox to construct a new slice to hold the read objects
func (jobState_EntityInfo) MakeSlice(capacity int) interface{} {
	return make([]*JobState, 0, capacity)
}

// AppendToSlice is called by ObjectBox to fill the slice of the read objects
func (jobState_EntityInfo) AppendToSlice(slice interface{}, object interface{}) interface{} {
	if object == nil {
		return append(slice.([]*JobState), nil)
	}
	return append(slice.([]*JobState), object.(*JobState))
}

// Box provides CRUD access to JobState objects
type JobStateBox struct {
	*objectbox.Box
}

// BoxForJobState opens a box of JobState objects
func BoxForJobState(ob *objectbox.ObjectBox) *JobStateBox {
	return &JobStateBox{
		Box: ob.InternalBox(14),
	}
}

// Put synchronously inserts/updates a single object.
// In case the Id is not specified, it would be assigned automatically (auto-increment).
// When inserting, the JobState.Id property on the passed object will be assigned the new ID as well.
func (box *JobStateBox) Put(object *JobState) (uint64, error) {
	return box.Box.Put(object)
}

// Insert synchronously inserts a single object. As opposed to Put, Insert will fail if given an ID that already exists.
// In case the Id is not specified, it would be assigned automatically (auto-increment).
// When inserting, the JobState.Id property on the passed object will be assigned the new ID as well.
func (box *JobStateBox) Insert(object *JobState) (uint64, error) {
	return box.Box.Insert(object)
}

// Update synchronously updates a single object.
// As opposed to Put, Update will fail if an object with the same ID is not found in the database.
func (box *JobStateBox) Update(object *JobState) error {
	return box.Box.Update(object)
}

// PutAsync asynchronously inserts/updates a single object.
// Deprecated: use box.Async().Put() instead
func (box *JobStateBox) PutAsync(object *JobState) (uint64, error) {
	return box.Box.PutAsync(object)
}

// PutMany inserts multiple objects in single transaction.
// In case Ids are not set on the objects, they would be assigned automatically (auto-increment).
//
// Returns: IDs of the put objects (in the same order).
// When inserting, the JobState.Id property on the objects in the slice will be assigned the new IDs as well.
//
// Note: In case an error occurs during the transaction, some of the objects may already have the JobState.Id assigned
// even though the transaction has been rolled back and the objects are not stored under those IDs.
//
// Note: The slice may be empty or even nil; in both cases, an empty IDs slice and no error is returned.
func (box *JobStateBox) PutMany(objects []*JobState) ([]uint64, error) {
	return box.Box.PutMany(objects)
}

// Get reads a single object.
//
// Returns nil (and no error) in case the object with the given ID doesn't exist.
func (box *JobStateBox) Get(id uint64) (*JobState, error) {
	object, err := box.Box.Get(id)
	if err != nil {
		return nil, err
	} else if object == nil {
		return nil, nil
	}
	return object.(*JobState), nil
}

// GetMany reads multiple objects at once.
// If any of the objects doesn't exist, its position in the return slice is nil
func (box *JobStateBox) GetMany(ids ...uint64) ([]*JobState, error) {
	objects, err := box.Box.GetMany(ids...)
	if err != nil {
		return nil, err
	}
	return objects.([]*JobState), nil
}

// GetManyExisting reads multiple objects at once, skipping those that do not exist.
func (box *JobStateBox) GetManyExisting(ids ...uint64) ([]*JobState, error) {
	objects, err := box.Box.GetManyExisting(ids...)
	if err != nil {
		return nil, err
	}
	return objects.([]*JobState), nil
}

// GetAll reads all stored objects
func (box *JobStateBox) GetAll() ([]*JobState, error) {
	objects, err := box.Box.GetAll()
	if err != nil {
		return nil, err
	}
	return objects.([]*JobState), nil
}

// Remove deletes a single object
func (box *JobStateBox) Remove(object *JobState) error {
	return box.Box.Remove(object)
}

// RemoveMany deletes multiple objects at once.
// Returns the number of deleted object or error on failure.
// Note that this method will not fail if an object is not found (e.g. already removed).
// In case you need to strictly check whether all of the objects exist before removing them,
// you can execute multiple box.Contains() and box.Remove() inside a single write transaction.
func (box *JobStateBox) RemoveMany(objects ...*JobState) (uint64, error) {
	var ids = make([]uint64, len(objects))
	for k, object := range objects {
		ids[k] = object.Id
	}
	return box.Box.RemoveIds(ids...)
}

// Creates a query with the given conditions. Use the fields of the JobState_ struct to create conditions.
// Keep the *JobStateQuery if you intend to execute the query multiple times.
// Note: this function panics if you try to create illegal queries; e.g. use properties of an alien type.
// This is typically a programming error. Use QueryOrError instead if you want the explicit error check.
func (box *JobStateBox) Query(conditions ...objectbox.Condition) *JobStateQuery {
	return &JobStateQuery{
		box.Box.Query(conditions...),
	}
}

// Creates a query with the given conditions. Use the fields of the JobState_ struct to create conditions.
// Keep the *JobStateQuery if you intend to execute the query multiple times.
func (box *JobStateBox) QueryOrError(conditions ...objectbox.Condition) (*JobStateQuery, error) {
	if query, err := box.Box.QueryOrError(conditions...); err != nil {
		return nil, err
	} else {
		return &JobStateQuery{query}, nil
	}
}

// Async provides access to the default Async Box for asynchronous operations. See JobStateAsyncBox for more information.
func (box *JobStateBox) Async() *JobStateAsyncBox {
	return &JobStateAsyncBox{AsyncBox: box.Box.Async()}
}

// JobStateAsyncBox provides asynchronous operations on JobState objects.
//
// Asynchronous operations are executed on a separate internal thread for better performance.
//
// There are two main use cases:
//
// 1) "execute & forget:" you gain faster put/remove operations as you don't have to wait for the transaction to finish.
//
// 2) Many small transactions: if your write load is typically a lot of individual puts that happen in parallel,
// this will merge small transactions into bigger ones. This results in a significant gain in overall throughput.
//
// In situations with (extremely) high async load, an async method may be throttled (~1ms) or delayed up to 1 second.
// In the unlikely event that the object could still not be enqueued (full queue), an error will be returned.
//
// Note that async methods do not give you hard durability guarantees like the synchronous Box provides.
// There is a small time window in which the data may not have been committed durably yet.
type JobStateAsyncBox struct {
	*objectbox.AsyncBox
}

// AsyncBoxForJobState creates a new async box with the given operation timeout in case an async queue is full.
// The returned struct must be freed explicitly using the Close() method.
// It's usually preferable to use JobStateBox::Async() which takes care of resource management and doesn't require closing.
func AsyncBoxForJobState(ob *objectbox.ObjectBox, timeoutMs uint64) *JobStateAsyncBox {
	var async, err = objectbox.NewAsyncBox(ob, 14, timeoutMs)
	if err != nil {
		panic("Could not create async box for entity ID 14: %s" + err.Error())
	}
	return &JobStateAsyncBox{AsyncBox: async}
}

// Put inserts/updates a single object asynchronously.
// When inserting a new object, the Id property on the passed object will be assigned the new ID the entity would hold
// if the insert is ultimately successful. The newly assigned ID may not become valid if the insert fails.
func (asyncBox *JobStateAsyncBox) Put(object *JobState) (uint64, error) {
	return asyncBox.AsyncBox.Put(object)
}

// Insert a single object asynchronously.
// The Id property on the passed object will be assigned the new ID the entity would hold if the insert is ultimately
// successful. The newly assigned ID may not become valid if the insert fails.
// Fails silently if an object with the same ID already exists (this error is not returned).
func (asyncBox *JobStateAsyncBox) Insert(object *JobState) (id uint64, err error) {
	return asyncBox.AsyncBox.Insert(object)
}

// Update a single object asynchronously.
// The object must already exists or the update fails silently (without an error returned).
func (asyncBox *JobStateAsyncBox) Update(object *JobState) error {
	return asyncBox.AsyncBox.Update(object)
}

// Remove deletes a single object asynchronously.
func (asyncBox *JobStateAsyncBox) Remove(object *JobState) error {
	return asyncBox.AsyncBox.Remove(object)
}

// Query provides a way to search stored objects
//
// For example, you can find all JobState which Id is either 42 or 47:
// 		box.Query(JobState_.Id.In(42, 47)).Find()
type JobStateQuery struct {
	*objectbox.Query
}

// Find returns all objects matching the query
func (query *JobStateQuery) Find() ([]*JobState, error) {
	objects, err := query.Query.Find()
	if err != nil {
		return nil, err
	}
	return objects.([]*JobState), nil
}

// Offset defines the index of the first object to process (how many objects to skip)
func (query *JobStateQuery) Offset(offset uint64) *JobStateQuery {
	query.Query.Offset(offset)
	return query
}

// Limit sets the number of elements to process by the query
func (query *JobStateQuery) Limit(limit uint64) *JobStateQuery {
	query.Query.Limit(limit)
	return query
}

type workspaceID_EntityInfo struct {
	objectbox.Entity
	Uid uint64
}

var WorkspaceIDBinding = workspaceID_EntityInfo{
	Entity: objectbox.Entity{
		Id: 15,
	},
	Uid: 3625977901417815260,
}

// WorkspaceID_ contains type-based Property helpers to facilitate some common operations such as Queries.
var WorkspaceID_ = struct {
	Name *objectbox.PropertyString
	Id   *objectbox.PropertyUint64
}{
	Name: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id:     1,
			Entity: &WorkspaceIDBinding.Entity,
		},
	},
	Id: &objectbox.PropertyUint64{
		BaseProperty: &objectbox.BaseProperty{
			Id:     2,
			Entity: &WorkspaceIDBinding.Entity,
		},
	},
}

// GeneratorVersion is called by ObjectBox to verify the compatibility of the generator used to generate this code
func (workspaceID_EntityInfo) GeneratorVersion() int {
	return 6
}

// AddToModel is called by ObjectBox during model build
func (workspaceID_EntityInfo) AddToModel(model *objectbox.Model) {
	model.Entity("WorkspaceID", 15, 3625977901417815260)
	model.Property("Name", 9, 1, 5860178705155352300)
	model.PropertyFlags(2080)
	model.PropertyIndex(19, 3814709225882759134)
	model.Property("Id", 6, 2, 7935076294102034986)
	model.PropertyFlags(1)
	model.EntityLastPropertyId(2, 7935076294102034986)
}

// GetId is called by ObjectBox during Put operations to check for existing ID on an object
func (workspaceID_EntityInfo) GetId(object interface{}) (uint64, error) {
	return object.(*WorkspaceID).Id, nil
}

// SetId is called by ObjectBox during Put to update an ID on an object that has just been inserted
func (workspaceID_EntityInfo) SetId(object interface{}, id uint64) error {
	object.(*WorkspaceID).Id = id
	return nil
}

// PutRelated is called by ObjectBox to put related entities before the object itself is flattened and put
func (workspaceID_EntityInfo) PutRelated(ob *objectbox.ObjectBox, object interface{}, id uint64) error {
	return nil
}

// Flatten is called by ObjectBox to transform an object to a FlatBuffer
func (workspaceID_EntityInfo) Flatten(object interface{}, fbb *flatbuffers.Builder, id uint64) error {
	obj := object.(*WorkspaceID)
	var offsetName = fbutils.CreateStringOffset(fbb, obj.Name)

	// build the FlatBuffers object
	fbb.StartObject(2)
	fbutils.SetUOffsetTSlot(fbb, 0, offsetName)
	fbutils.SetUint64Slot(fbb, 1, id)
	return nil
}

// Load is called by ObjectBox to load an object from a FlatBuffer
func (workspaceID_EntityInfo) Load(ob *objectbox.ObjectBox, bytes []byte) (interface{}, error) {
	if len(bytes) == 0 { // sanity check, should "never" happen
		return nil, errors.New("can't deserialize an object of type 'WorkspaceID' - no data received")
	}

	var table = &flatbuffers.Table{
		Bytes: bytes,
		Pos:   flatbuffers.GetUOffsetT(bytes),
	}

	var propId = table.GetUint64Slot(6, 0)

	return &WorkspaceID{
		Name: fbutils.GetStringSlot(table, 4),
		Id:   propId,
	}, nil
}

// MakeSlice is called by ObjectBox to construct a new slice to hold the read objects
func (workspaceID_EntityInfo) MakeSlice(capacity int) interface{} {
	return make([]*WorkspaceID, 0, capacity)
}

// AppendToSlice is called by ObjectBox to fill the slice of the read objects
func (workspaceID_EntityInfo) AppendToSlice(slice interface{}, object interface{}) interface{} {
	if object == nil {
		return append(slice.([]*WorkspaceID), nil)
	}
	return append(slice.([]*WorkspaceID), object.(*WorkspaceID))
}

// Box provides CRUD access to WorkspaceID objects
type WorkspaceIDBox struct {
	*objectbox.Box
}

// BoxForWorkspaceID opens a box of WorkspaceID objects
func BoxForWorkspaceID(ob *objectbox.ObjectBox) *WorkspaceIDBox {
	return &WorkspaceIDBox{
		Box: ob.InternalBox(15),
	}
}

// Put synchronously inserts/updates a single object.
// In case the Id is not specified, it would be assigned automatically (auto-increment).
// When inserting, the WorkspaceID.Id property on the passed object will be assigned the new ID as well.
func (box *WorkspaceIDBox) Put(object *WorkspaceID) (uint64, error) {
	return box.Box.Put(object)
}

// Insert synchronously inserts a single object. As opposed to Put, Insert will fail if given an ID that already exists.
// In case the Id is not specified, it would be assigned automatically (auto-increment).
// When inserting, the WorkspaceID.Id property on the passed object will be assigned the new ID as well.
func (box *WorkspaceIDBox) Insert(object *WorkspaceID) (uint64, error) {
	return box.Box.Insert(object)
}

// Update synchronously updates a single object.
// As opposed to Put, Update will fail if an object with the same ID is not found in the database.
func (box *WorkspaceIDBox) Update(object *WorkspaceID) error {
	return box.Box.Update(object)
}

// PutAsync asynchronously inserts/updates a single object.
// Deprecated: use box.Async().Put() instead
func (box *WorkspaceIDBox) PutAsync(object *WorkspaceID) (uint64, error) {
	return box.Box.PutAsync(object)
}

// PutMany inserts multiple objects in single transaction.
// In case Ids are not set on the objects, they would be assigned automatically (auto-increment).
//
// Returns: IDs of the put objects (in the same order).
// When inserting, the WorkspaceID.Id property on the objects in the slice will be assigned the new IDs as well.
//
// Note: In case an error occurs during the transaction, some of the objects may already have the WorkspaceID.Id assigned
// even though the transaction has been rolled back and the objects are not stored under those IDs.
//
// Note: The slice may be empty or even nil; in both cases, an empty IDs slice and no error is returned.
func (box *WorkspaceIDBox) PutMany(objects []*WorkspaceID) ([]uint64, error) {
	return box.Box.PutMany(objects)
}

// Get reads a single object.
//
// Returns nil (and no error) in case the object with the given ID doesn't exist.
func (box *WorkspaceIDBox) Get(id uint64) (*WorkspaceID, error) {
	object, err := box.Box.Get(id)
	if err != nil {
		return nil, err
	} else if object == nil {
		return nil, nil
	}
	return object.(*WorkspaceID), nil
}

// GetMany reads multiple objects at once.
// If any of the objects doesn't exist, its position in the return slice is nil
func (box *WorkspaceIDBox) GetMany(ids ...uint64) ([]*WorkspaceID, error) {
	objects, err := box.Box.GetMany(ids...)
	if err != nil {
		return nil, err
	}
	return objects.([]*WorkspaceID), nil
}

// GetManyExisting reads multiple objects at once, skipping those that do not exist.
func (box *WorkspaceIDBox) GetManyExisting(ids ...uint64) ([]*WorkspaceID, error) {
	objects, err := box.Box.GetManyExisting(ids...)
	if err != nil {
		return nil, err
	}
	return objects.([]*WorkspaceID), nil
}

// GetAll reads all stored objects
func (box *WorkspaceIDBox) GetAll() ([]*WorkspaceID, error) {
	objects, err := box.Box.GetAll()
	if err != nil {
		return nil, err
	}
	return objects.([]*WorkspaceID), nil
}

// Remove deletes a single object
func (box *WorkspaceIDBox) Remove(object *WorkspaceID) error {
	return box.Box.Remove(object)
}

// RemoveMany deletes multiple objects at once.
// Returns the number of deleted object or error on failure.
// Note that this method will not fail if an object is not found (e.g. already removed).
// In case you need to strictly check whether all of the objects exist before removing them,
// you can execute multiple box.Contains() and box.Remove() inside a single write transaction.
func (box *WorkspaceIDBox) RemoveMany(objects ...*WorkspaceID) (uint64, error) {
	var ids = make([]uint64, len(objects))
	for k, object := range objects {
		ids[k] = object.Id
	}
	return box.Box.RemoveIds(ids...)
}

// Creates a query with the given conditions. Use the fields of the WorkspaceID_ struct to create conditions.
// Keep the *WorkspaceIDQuery if you intend to execute the query multiple times.
// Note: this function panics if you try to create illegal queries; e.g. use properties of an alien type.
// This is typically a programming error. Use QueryOrError instead if you want the explicit error check.
func (box *WorkspaceIDBox) Query(conditions ...objectbox.Condition) *WorkspaceIDQuery {
	return &WorkspaceIDQuery{
		box.Box.Query(conditions...),
	}
}

// Creates a query with the given conditions. Use the fields of the WorkspaceID_ struct to create conditions.
// Keep the *WorkspaceIDQuery if you intend to execute the query multiple times.
func (box *WorkspaceIDBox) QueryOrError(conditions ...objectbox.Condition) (*WorkspaceIDQuery, error) {
	if query, err := box.Box.QueryOrError(conditions...); err != nil {
		return nil, err
	} else {
		return &WorkspaceIDQuery{query}, nil
	}
}

// Async provides access to the default Async Box for asynchronous operations. See WorkspaceIDAsyncBox for more information.
func (box *WorkspaceIDBox) Async() *WorkspaceIDAsyncBox {
	return &WorkspaceIDAsyncBox{AsyncBox: box.Box.Async()}
}

// WorkspaceIDAsyncBox provides asynchronous operations on WorkspaceID objects.
//
// Asynchronous operations are executed on a separate internal thread for better performance.
//
// There are two main use cases:
//
// 1) "execute & forget:" you gain faster put/remove operations as you don't have to wait for the transaction to finish.
//
// 2) Many small transactions: if your write load is typically a lot of individual puts that happen in parallel,
// this will merge small transactions into bigger ones. This results in a significant gain in overall throughput.
//
// In situations with (extremely) high async load, an async method may be throttled (~1ms) or delayed up to 1 second.
// In the unlikely event that the object could still not be enqueued (full queue), an error will be returned.
//
// Note that async methods do not give you hard durability guarantees like the synchronous Box provides.
// There is a small time window in which the data may not have been committed durably yet.
type WorkspaceIDAsyncBox struct {
	*objectbox.AsyncBox
}

// AsyncBoxForWorkspaceID creates a new async box with the given operation timeout in case an async queue is full.
// The returned struct must be freed explicitly using the Close() method.
// It's usually preferable to use WorkspaceIDBox::Async() which takes care of resource management and doesn't require closing.
func AsyncBoxForWorkspaceID(ob *objectbox.ObjectBox, timeoutMs uint64) *WorkspaceIDAsyncBox {
	var async, err = objectbox.NewAsyncBox(ob, 15, timeoutMs)
	if err != nil {
		panic("Could not create async box for entity ID 15: %s" + err.Error())
	}
	return &WorkspaceIDAsyncBox{AsyncBox: async}
}

// Put inserts/updates a single object asynchronously.
// When inserting a new object, the Id property on the passed object will be assigned the new ID the entity would hold
// if the insert is ultimately successful. The newly assigned ID may not become valid if the insert fails.
func (asyncBox *WorkspaceIDAsyncBox) Put(object *WorkspaceID) (uint64, error) {
	return asyncBox.AsyncBox.Put(object)
}

// Insert a single object asynchronously.
// The Id property on the passed object will be assigned the new ID the entity would hold if the insert is ultimately
// successful. The newly assigned ID may not become valid if the insert fails.
// Fails silently if an object with the same ID already exists (this error is not returned).
func (asyncBox *WorkspaceIDAsyncBox) Insert(object *WorkspaceID) (id uint64, err error) {
	return asyncBox.AsyncBox.Insert(object)
}

// Update a single object asynchronously.
// The object must already exists or the update fails silently (without an error returned).
func (asyncBox *WorkspaceIDAsyncBox) Update(object *WorkspaceID) error {
	return asyncBox.AsyncBox.Update(object)
}

// Remove deletes a single object asynchronously.
func (asyncBox *WorkspaceIDAsyncBox) Remove(object *WorkspaceID) error {
	return asyncBox.AsyncBox.Remove(object)
}

// Query provides a way to search stored objects
//
// For example, you can find all WorkspaceID which Id is either 42 or 47:
// 		box.Query(WorkspaceID_.Id.In(42, 47)).Find()
type WorkspaceIDQuery struct {
	*objectbox.Query
}

// Find returns all objects matching the query
func (query *WorkspaceIDQuery) Find() ([]*WorkspaceID, error) {
	objects, err := query.Query.Find()
	if err != nil {
		return nil, err
	}
	return objects.([]*WorkspaceID), nil
}

// Offset defines the index of the first object to process (how many objects to skip)
func (query *WorkspaceIDQuery) Offset(offset uint64) *WorkspaceIDQuery {
	query.Query.Offset(offset)
	return query
}

// Limit sets the number of elements to process by the query
func (query *WorkspaceIDQuery) Limit(limit uint64) *WorkspaceIDQuery {
	query.Query.Limit(limit)
	return query
}
